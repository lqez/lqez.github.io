<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Feature creep designer - 2017-10</title><link href="//lqez.github.io/blog/" rel="alternate"></link><link href="//lqez.github.io/blog/feeds/2017-10.atom.xml" rel="self"></link><id>//lqez.github.io/blog/</id><updated>2017-10-31T00:00:00+09:00</updated><entry><title>Meaningless commits</title><link href="//lqez.github.io/blog/meaningless-commits.html" rel="alternate"></link><published>2017-10-31T00:00:00+09:00</published><updated>2017-10-31T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-10-31:/blog/meaningless-commits.html</id><summary type="html">&lt;p&gt;하고 있는 일에 지나치게 몰입하여 주변을 살피지 못하게 되면, 보다 의미있는 결과를 내기가 어렵다.
요즘 아무도 사용할 것 같지 않은 기능들을 만드는데 시간을 낭비하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;마크다운 목록 정렬하기&lt;/li&gt;
&lt;li&gt;한글 처리를 위한 Django template filter/tag 만들기&lt;/li&gt;
&lt;li&gt;위지윅 에디터 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;mdls - Markdown List Sorter&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/lqez/mdls"&gt;https://github.com/lqez/mdls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;먼저, &lt;a href="https://daringfireball.net/projects/markdown/"&gt;마크다운 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;하고 있는 일에 지나치게 몰입하여 주변을 살피지 못하게 되면, 보다 의미있는 결과를 내기가 어렵다.
요즘 아무도 사용할 것 같지 않은 기능들을 만드는데 시간을 낭비하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;마크다운 목록 정렬하기&lt;/li&gt;
&lt;li&gt;한글 처리를 위한 Django template filter/tag 만들기&lt;/li&gt;
&lt;li&gt;위지윅 에디터 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;mdls - Markdown List Sorter&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/lqez/mdls"&gt;https://github.com/lqez/mdls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;먼저, &lt;a href="https://daringfireball.net/projects/markdown/"&gt;마크다운&lt;/a&gt;은 애초에 표현과 내용의 분리를 중요하게 생각하고, 글을 – 비교적 – 체계적으로 쓰기를 원하는 사람들이 선호하는 글의 형식인데,
이런 유형의 글에 포함되어 있는 목록을 정렬하는 프로그램을 만들겠다는 것 자체가 별 의미가 없다.
마크다운의 목록은 대체로 글쓴이의 의도대로 정렬되어 있을 가능성이 높기 때문이다. ordered list 뿐만 아니라 unordered list 의 경우도 마찬가지다.&lt;/p&gt;
&lt;p&gt;이 기능을 만든 유일한 이유는 관리하고 있던 &lt;a href="https://github.com/summernote/awesome-summernote/"&gt;awesome-summernote&lt;/a&gt;의 플러그인 목록 때문이다.
각 분류에 속해있는 목록을 이제까지는 추가된 순서대로 보관해왔는데, 어떤 기여자가 자신이 추가한 플러그인을 &lt;a href="https://github.com/summernote/awesome-summernote/pull/43/files"&gt;가장 아래가 아닌 곳에 추가&lt;/a&gt;하면서 고민이 시작되었다.
만약 기계적으로 목록을 정렬할 수 있다면, 해당 pull request가 유효한지 검증할 수도 있고, 그렇지 않은 경우 자동으로 정렬하는 것도 가능하기 때문이다.&lt;/p&gt;
&lt;p&gt;하지만, 이는 많은 목록을 관리하기에 애초에 적합하지 않은 마크다운 형식을 쓰는 것 자체가 문제인데, 이를 잘못된 방법으로 해결하려는 것에 가깝게 느껴진다.
그래도 일단 시작했으니 해당 프로젝트의 빌드 과정에 적용할 때까지는 해보려고 한다.&lt;/p&gt;
&lt;h2&gt;django-tossi&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/lqez/django-tossi"&gt;https://github.com/lqez/django-tossi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonhosted.org/korean/"&gt;Korean&lt;/a&gt;은 한글의 형태소를 다루는 라이브러리였다.
과거형으로 적는 이유는 저작자가 이 프로젝트를 deprecate 시키고 &lt;a href="https://github.com/what-studio/tossi"&gt;Tossi&lt;/a&gt;라는 새로운 라이브러리를 만들고 있기 때문이다.
예전에 Korean 라이브러리를 사용하여 Django template 상에서 적절한 조사를 선택하여 출력하는 것을 도와주는 django-template-korean 확장을 만들었는데,
아예 &lt;a href="https://github.com/sublee/korean/pull/3"&gt;Korean 모듈 내부로 내장&lt;/a&gt;하면서 해당 프로젝트도 중단했었다.&lt;/p&gt;
&lt;p&gt;하지만 Korean 라이브러리는 개발이 중지되었으므로 Tossi를 이용해서 django-template-korean을 django-tossi로 다시 살려보려고 한다.
헌데, Korean 라이브러리에 있던 &lt;a href="http://pythonhosted.org/korean/#proofreading-legacy-text"&gt;proofreading&lt;/a&gt; 기능이 Tossi에서는 사라졌다.
이 기능을 django-tossi 내에 구현을 할까 아니면 Tossi 쪽에 추가하는 PR을 보낼까 고민을 했는데, 이 기능을 만들기 전에 과연 이 기능을 얼마나 자주, 중요하게 쓰고 있었는지 생각해볼 필요가 있다는 생각이 들었다.
원래 있었던 것이 없어졌다고 해서 그냥 만드는 것이 아니라, 왜 없어졌을까, 그동안 이 기능을 유용하게 썼는가 한 번 따져봐야겠다.&lt;/p&gt;
&lt;h2&gt;summernote&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/summernote/summernote"&gt;https://github.com/summernote/summernote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2013년부터 참여해오고 있는 프로젝트. 요즘에 누가 위지윅 에디터를 만드냐 싶을 정도로 예전보다는 관심이 많이 줄어든 것이 사실이다.
대부분 의식하지 못하고 있어서 그렇지 &lt;a href="https://github.com/facebook/draft-js"&gt;페이스북의 글쓰기 창도 위지윅&lt;/a&gt;이다.
이 프로젝트에 시간을 쏟는 것이 어떤 긍정적인 변화를 가져올지 아직 잘 모르겠지만, 한번 시작한 일은 책임지자는 마음으로 계속 조금씩 기여하고 있다.&lt;/p&gt;
&lt;p&gt;하지만, 최근에는 예전만큼 기여하지 못하고 있기도 하고, 다른 기여자들도 실무가 바뀌가 시간이 없어져 프로젝트 관리가 제대로 되고 있지 못하다.
어떤 기여자는 프로젝트 작성자와 기존 기여자들이 제대로 활동하지 않는 것에 걱정과 &lt;a href="https://github.com/summernote/summernote/issues/2526"&gt;불만을 가지고 있다&lt;/a&gt;.
계속 꾸준히 하는 것 외에 어떻게 잘 할 수 있을지 고민이 필요하다.&lt;/p&gt;
&lt;p&gt;그냥 오늘 손댔던 일들을 적어본 글.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Data and Logic</title><link href="//lqez.github.io/blog/data-and-logic.html" rel="alternate"></link><published>2017-10-19T00:00:00+09:00</published><updated>2017-10-19T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-10-19:/blog/data-and-logic.html</id><summary type="html">&lt;p&gt;구글 브레인 프로젝트를 이끌고 있는 &lt;a href="https://research.google.com/pubs/jeff.html"&gt;제프 딘&lt;/a&gt;이 얼마 전에 &lt;a href="https://k2i.rice.edu/events/ken-kennedy-institute-lecture-series-jeff-dean-google-senior-fellow"&gt;발표&lt;/a&gt;한 바에 따르면
구글의 기존 언어 번역 코드는 50만줄 가량이었는데, 텐서플로우로 작성된 대규모 머신 러닝 모델에 기반한 번역 코드는 500줄 수준으로 줄어들었다고 한다.&lt;/p&gt;
&lt;p&gt;참고: &lt;a href="https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/"&gt;Google shrinks language translation code from 500,000 to 500 lines&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;FM Nostalgia&lt;/h3&gt;
&lt;p&gt;머신 러닝에 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;구글 브레인 프로젝트를 이끌고 있는 &lt;a href="https://research.google.com/pubs/jeff.html"&gt;제프 딘&lt;/a&gt;이 얼마 전에 &lt;a href="https://k2i.rice.edu/events/ken-kennedy-institute-lecture-series-jeff-dean-google-senior-fellow"&gt;발표&lt;/a&gt;한 바에 따르면
구글의 기존 언어 번역 코드는 50만줄 가량이었는데, 텐서플로우로 작성된 대규모 머신 러닝 모델에 기반한 번역 코드는 500줄 수준으로 줄어들었다고 한다.&lt;/p&gt;
&lt;p&gt;참고: &lt;a href="https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/"&gt;Google shrinks language translation code from 500,000 to 500 lines&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;FM Nostalgia&lt;/h3&gt;
&lt;p&gt;머신 러닝에 기반한 여러 프로젝트를 보면서 계속 묘한 기분이 들었는데, 문득 20년 전의 기억이 떠올랐다.
바로 &lt;a href="https://en.wikipedia.org/wiki/Frequency_modulation_synthesis"&gt;FM 음향&lt;/a&gt;에 기반한 미디 음악에서 &lt;a href="https://en.wikipedia.org/wiki/Pulse-code_modulation"&gt;PCM&lt;/a&gt; 기반의 &lt;a href="https://en.wikipedia.org/wiki/Music_tracker"&gt;트래커&lt;/a&gt; 음악들로 넘어갈 때,
그리고 완전한 PCM 기반의 음원 저장 – &lt;a href="https://en.wikipedia.org/wiki/WAV"&gt;WAV&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/MP3"&gt;MP3&lt;/a&gt;와 &lt;a href="https://en.wikipedia.org/wiki/RealAudio"&gt;RA&lt;/a&gt; 등 – 의 유행과 이들 음원의 유통이 본격화 되던 때에 뭔가 설명할 수 없는 아쉬움과 답답함을 느꼈었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Visual Composer by AdLib from vgmpf" src="./images/2017-10/adlib_visual_composer.png"&gt;&lt;/p&gt;
&lt;p&gt;내가 스스로 듣고자 해서 들었던 첫 음악들은 라디오나 비닐, 테이프가 아닌 컴퓨터 음악이었다.
대표적 FM 음향칩인 &lt;a href="https://en.wikipedia.org/wiki/Yamaha_YM3812"&gt;야마하 YM3812&lt;/a&gt;에 기반한 &lt;a href="http://www.vgmpf.com/Wiki/index.php/Ad_Lib"&gt;Ad Lib&lt;/a&gt;사의 &lt;a href="http://www.vgmpf.com/Wiki/index.php/AdLib"&gt;AdLib&lt;/a&gt; 카드를 힘들게 구해, PC 본체 뒤로 손을 뻗어 볼륨을 조정하며 처음으로 &lt;a href="http://www.vgmpf.com/Wiki/index.php/ROL"&gt;ROL&lt;/a&gt; 음악을 들었다.
이 방식으로 게임 음악을 만들며 즐거운 시기를 보냈었다. 몇 년이 지나 고등학생이 되던 즈음에 트래커 음악을 알게 되고, FM 음원이 아닌 샘플링된 PCM 음원으로 곡을 만든다는 것이 이상했지만 이내 적응하여 이 방식으로도 음악을 만들었다.&lt;/p&gt;
&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/59754377&amp;amp;color=%23ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;&lt;/iframe&gt;

&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/59754224&amp;amp;color=%23ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;&lt;/iframe&gt;

&lt;p&gt;어렸던 나는 수 KiB에 불과한 ROL, MID 나아가 트래커로 만들어진 음악이 낮은 비트레이트를 가진 WAV / MP3 파일에 비해 훨씬 듣기 좋은 음악을 제공하는데, 왜 PCM 으로 곡을 저장해서 유통해야 하는지 이해하지 못했었다.
특정 음을 흉내내기 위한 일종의 ‘악기’ 정보인 &lt;a href="http://www.vgmpf.com/Wiki/index.php/BNK"&gt;BNK&lt;/a&gt; 파일이 있기 때문에 아주 적은 용량의 ROL 파일만으로도 괜찮은 소리를 만들어낼 수 있었던 것을,
BNK 파일이 가지고 있던 작은 정보로 그럴싸한 음을 낼 수 있었던 것이 OPL(FM Operator Type-L) 하드웨어 칩이 있기 때문이라는 것을 당시에는 알지 못했다.
하드웨어였던 OPL을 소프트웨어로 에뮬레이션 하기 위해서는 (당시 기준으로는) 상당한 컴퓨팅 파워가 필요했을 것이다.&lt;/p&gt;
&lt;p&gt;참고: &lt;a href="https://github.com/gtaylormb/opl3_fpga"&gt;Reverse engineered SystemVerilog RTL version of the Yamaha OPL3 (YMF262) FM Synthesizer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;적은 용량의 음악 파일이라는 것은 하드웨어 음원 칩, BNK 파일, 그리고 먼 훗날 거대한 용량을 자랑하는 &lt;a href="https://en.wikipedia.org/wiki/Virtual_Studio_Technology"&gt;VST&lt;/a&gt; 등의 도움으로 가능했던 것이다.&lt;/p&gt;
&lt;h3&gt;Data consumes logic&lt;/h3&gt;
&lt;p&gt;방대한 양의 저장소(메모리나 하드디스크, SSD와 같은)와 빠른 프로세싱 능력은 복잡하고 절차적인 알고리즘, 로직을 줄이는 것을 가능하게 한다.
구구단을 루프로 출력하는 코드와 구구단을 데이터로 가지고 있어 그대로 출력하는 코드는 어떻게 다른가? 50만줄에 해당하는 코드의 총 용량과 500줄의 코드가 작동하는데 필요한 저장소의 크기는 얼마나 차이나는가?
일반적이지 않겠지만, 50만줄이 모두 80글자로 채워져 있다고 가정해도 그 소스 코드의 전체 용량은 약 38MiB 에 불과하다. (해당 소스코드는 &lt;a href="https://ko.wikipedia.org/wiki/UTF-8"&gt;UTF-8&lt;/a&gt;으로 작성되었겠지?)&lt;/p&gt;
&lt;p&gt;기계 학습이 가능해지는 것은 소프트웨어 만의 문제가 아니다. 코드가 동작하는 컴퓨팅 환경의 전반적인 발전이 없다면 과연 개인 컴퓨터에서 &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; 예제들을 구동하며 익힐 수 있었을까.&lt;/p&gt;
&lt;p&gt;위 &lt;a href="https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/"&gt;참조&lt;/a&gt; 글에서도 다음과 같이 분명히 언급하고 있다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Though bear in mind, Google has literally billions of lines of code in its supporting infrastructure, which the new slimmed-down system likely relies upon. No free lunch!&lt;/p&gt;
&lt;/blockquote&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry></feed>