<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Feature creep designer - 2017-12</title><link href="//lqez.github.io/blog/" rel="alternate"></link><link href="//lqez.github.io/blog/feeds/2017-12.atom.xml" rel="self"></link><id>//lqez.github.io/blog/</id><updated>2017-12-21T00:00:00+09:00</updated><entry><title>The end is just another beginning</title><link href="//lqez.github.io/blog/the-end-is-just-another-beginning.html" rel="alternate"></link><published>2017-12-21T00:00:00+09:00</published><updated>2017-12-21T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-12-21:/blog/the-end-is-just-another-beginning.html</id><summary type="html">&lt;p&gt;&lt;img alt="The Last Moment" src="./images/2017-12/last-moment-mba.jpg"&gt;&lt;/p&gt;
&lt;p&gt;2017년을 마지막으로 스마트스터디를 퇴직한다.&lt;/p&gt;
&lt;p&gt;자신이 직접 디자인한 결재 양식으로 작성된 사직서와 공동대표 및 등기이사 사임 문서에 자필로 서명하는 일은 아무래도 낯선 일일 수밖에 없다.
스스로 선택한 일이라 마음은 무겁지만 불편하지는 않다.
지난 시간 동안 많은, 다양한 일이 있었고, 이제는 내가 보탬이 되지 않는다 생각하여 떠나는 것뿐이다.&lt;/p&gt;
&lt;p&gt;회사와 일에 지나치게 몰입하면 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="The Last Moment" src="./images/2017-12/last-moment-mba.jpg"&gt;&lt;/p&gt;
&lt;p&gt;2017년을 마지막으로 스마트스터디를 퇴직한다.&lt;/p&gt;
&lt;p&gt;자신이 직접 디자인한 결재 양식으로 작성된 사직서와 공동대표 및 등기이사 사임 문서에 자필로 서명하는 일은 아무래도 낯선 일일 수밖에 없다.
스스로 선택한 일이라 마음은 무겁지만 불편하지는 않다.
지난 시간 동안 많은, 다양한 일이 있었고, 이제는 내가 보탬이 되지 않는다 생각하여 떠나는 것뿐이다.&lt;/p&gt;
&lt;p&gt;회사와 일에 지나치게 몰입하면 삶 자체가 그 안에 매몰되어 마치 인생의 전부인 양 생각되기 쉽다.
직원으로 일했던 회사에서도 그러기가 쉬운데, 공동창업자로 시작했던 회사는 의식적으로 노력하지 않으면 일이 곧 삶이 된다.
지난 몇 년간 그랬었고, 그 때문에 객관성을 잃어버리며 동료와 주변 사람들을 힘들게 했다.&lt;/p&gt;
&lt;p&gt;힘듦에 내 책임이 크고, 한 분 한 분에게 인사드리고 죄송하다는 말씀을 드리지 못해 더 죄송하다.&lt;/p&gt;
&lt;p&gt;지난 시간을 돌아보며 정리하여 남기고 싶은 말이 많지만, 개인적인 부분이 많아 저장소와 회선을 낭비해가며 남기고 전할 만큼 의미가 있지 않으니,
아무것도 모르는 상태에서 창업하며 겪었던 일 중, 창업한다면 대체로 한 번쯤 생각해볼 만한 것에 대한 의견을 남겨본다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;공동창업은 좋은가&lt;/h4&gt;
&lt;p&gt;기본적으로 좋다고 생각한다. 일단 창업하고 나면 기쁜 일보다는 힘든 일이 훨씬 더 많기 마련인데,
정말 힘들 때 등을 맞대고 고민을 함께할 수 있는 상대는 배우자나 친구보다는, 아무래도 맥락을 더 많이 이해하는 다른 공동창업자일 수밖에 없다.&lt;/p&gt;
&lt;p&gt;좋아하는 것이 비슷한 사람보다, 싫어하는 것에 공통점이 있는 사람과 창업하는 게 낫다고 생각한다. 무언가를 좋아하는 것은 너무 쉽게 달라진다.
하지만, 사회에 바꾸고 싶은 것이 있거나 기존 산업에서 싫은 것이 있다면, 아무래도 더 오래 같은 곳을 바라보며 갈 수 있지 않을까.&lt;/p&gt;
&lt;p&gt;자신의 부족한 점을 채울 수 있는 사람과 공동창업하는 것도 잘 모르겠다.
일이 잘 될 때는 자기가 잘해서라고 생각하고, 잘 안될 때는 다른 사람을 탓하는 게 인간이다.
핵심 역량을 같이 고민하고 서로 성장에 도움 될 수 있는 사람이 공동창업을 하는 게 낫다고 생각한다.
창업가가 가지고 있지 못한 능력은 이후에 정말 필요해질 때에 다른 사람을 채용하거나 외부 회사를 통해 보강하는 게 좋을 것 같다.&lt;/p&gt;
&lt;h3&gt;어떻게 알릴 것인가&lt;/h3&gt;
&lt;p&gt;스스로 필요해서, 해야 한다고 생각해서 시작한 사업은 일단 본인이 미친 듯이 쓰면서 주변의 가까운 사람에게 알리는 게 기본이다.
하지만 모든 사업이 &lt;a href="http://www.piedpipersent.com/%EA%B0%9C%EB%B0%A5-%EB%A8%B9%EA%B8%B0eating-your-own-dog-food/"&gt;개밥 먹기&lt;/a&gt;를 할 수 있는 것은 아니고, 많은 경우 주변 사람들은 일반적인 지표를 주지 못하는 경우가 많다.
그러므로 불필요하게 주변 사람들 괴롭히지 말고, 최선의 매체를 통해서 적은 비용으로 빠르게 홍보를 시도해보고 빠르게 실패하는 과정을 반복하면 좋을 것 같다.&lt;/p&gt;
&lt;h3&gt;회사 이름은 어떻게 정할까&lt;/h3&gt;
&lt;p&gt;준곰(&lt;a href="https://twitter.com/joongom"&gt;@joongom&lt;/a&gt;)님과 며칠 전에 얘기하다, 이 문제에 대해서도 생각해보게 되었다.
조직의 문화에 대한 지향점을 이름에 넣는 편이 좋은지, 서비스나 제품을 담는 게 좋은지 늘 고민이 된다.
어떻게 일하면 좋을까를 고민해서 회사 이름을 지었다가, 외부와 의사소통 시에 답답해서 – 그래서 회사 이름이 뭐라고? – 회사 이름을 주력 제품이나 서비스명으로 바꾸는 경우도 봐왔고, 반대로 제품과 같게 지었다가 성장하는 중에 주력 사업이 바뀌면서 회사 이름이 따로 놀기도 한다.&lt;/p&gt;
&lt;p&gt;개인적으로는 초기부터 제품/서비스 브랜딩을 따로 한다는 전제하에, ‘어떻게’를 회사 이름으로 선택할 것 같다.
이후에 ‘무엇을’이 더 명확해지는 때에 회사 이름을 바꿀 수도 있다고 생각한다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;앞으로 어떤 조직에 속할지, 어떤 일을 할지 아직 결정한 것은 아무것도 없다.
다만, 몇 년 전부터 하고 싶었던 잡지를 시작하는 것과 글쓰기와 번역과 관련된 서비스를 하나 만들어보는 것이 사소한 목표다.
매일 매일 조금씩이라도 코딩을 계속하고 사람들을 만나고 싶다.&lt;/p&gt;
&lt;p&gt;영화 매트릭스에 &lt;a href="https://www.youtube.com/watch?v=5wqd-ETXrOw"&gt;이런 대사&lt;/a&gt;가 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;“Everything that has a beginning has an end.”&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;좋아하는 문장이지만 더 좋아하는 이 문장을 덧붙이고 싶다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;“The end is just another beginning.”&lt;/h3&gt;
&lt;/blockquote&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Threaded Generator in Python</title><link href="//lqez.github.io/blog/threaded-generator-in-python.html" rel="alternate"></link><published>2017-12-20T00:00:00+09:00</published><updated>2017-12-20T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-12-20:/blog/threaded-generator-in-python.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Command-line_interface"&gt;커맨드라인 인터페이스(CLI)&lt;/a&gt;를 가진 프로그램을 만들면서 &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_I/O"&gt;비동기 처리&lt;/a&gt;를 시도한 적이 없었다.
대부분 선택지를 출력한 후에 사용자로부터 값을 입력받으면 다음 동작을 수행하는 것을 반복하기 때문에 일반적인 &lt;a href="https://en.wikipedia.org/wiki/Thread_(computing)#Single_threading"&gt;단일 스레드&lt;/a&gt;로 작성해왔다.&lt;/p&gt;
&lt;p&gt;이번에 만든 CLI 프로그램인 &lt;a href="https://github.com/lqez/rogrepos"&gt;rogrepos&lt;/a&gt;는 GitHub에서 오픈소스 활동을 오래 하다 보면
수정사항을 작성하기 위한 목적으로 &lt;a href="https://en.wikipedia.org/wiki/Fork_(software_development)"&gt;포크&lt;/a&gt;했다가
더는 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Command-line_interface"&gt;커맨드라인 인터페이스(CLI)&lt;/a&gt;를 가진 프로그램을 만들면서 &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_I/O"&gt;비동기 처리&lt;/a&gt;를 시도한 적이 없었다.
대부분 선택지를 출력한 후에 사용자로부터 값을 입력받으면 다음 동작을 수행하는 것을 반복하기 때문에 일반적인 &lt;a href="https://en.wikipedia.org/wiki/Thread_(computing)#Single_threading"&gt;단일 스레드&lt;/a&gt;로 작성해왔다.&lt;/p&gt;
&lt;p&gt;이번에 만든 CLI 프로그램인 &lt;a href="https://github.com/lqez/rogrepos"&gt;rogrepos&lt;/a&gt;는 GitHub에서 오픈소스 활동을 오래 하다 보면
수정사항을 작성하기 위한 목적으로 &lt;a href="https://en.wikipedia.org/wiki/Fork_(software_development)"&gt;포크&lt;/a&gt;했다가
더는 사용되지 않고 방치된 저장소들이 쌓이는데, 이들을 손쉽게 정리하기 위한 도구이다.&lt;/p&gt;
&lt;p&gt;GitHub에서 저장소를 삭제하기 위해서는 확인 및 안전 차원에서 저장소 이름을 다시 한 번 입력해야 하는데,
정리해야 하는 저장소가 많으면 이 작업을 반복하는 것이 여간 귀찮은 일이 아니다.
rogrepos를 처음에는 기존처럼 비동기 처리 없이 단일 스레드로 작성하였는데 &lt;a href="https://developer.github.com/"&gt;GitHub API&lt;/a&gt; 호출이 여간 느린 게 아니라,
실제로 쓰기에는 실용적이지 못했다. 저장소 목록을 얻어오는 것은 오래 걸리더라도 한 번 기다리면 되니까 괜찮지만,
포크된 저장소인지 여부 등 정보를 추가로 얻어오려면 매번 기다려야 하는 것이 문제였다.&lt;/p&gt;
&lt;p&gt;이 문제를 코드를 조금만 고치면서 쓸만하게 만들려고 찾아보니, 반복문으로 작성된 코드를 &lt;a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)"&gt;제너레이터&lt;/a&gt;를 사용하도록 고치고
제너레이터를 다른 스레드에서 채우도록 변경하는 것이 좋아 보였다.
값을 생성하고 사용할 때에 문제가 없도록 스레드에 안전한 &lt;a href="https://docs.python.org/3/library/queue.html"&gt;큐(Queue)&lt;/a&gt;를 사용하면 기존의 동기 코드를 크게 건드리지 않고 백그라운드에서 추가 작업을 진행할 수 있다.
이와 같은 동작을 Threaded Generator라는 이름으로 만들어놓은 &lt;a href="https://gist.github.com/everilae/9697228"&gt;코드 조각(gist)&lt;/a&gt;이 있어,
rogrepos에서 &lt;a href="https://github.com/lqez/rogrepos/blob/5513ea4e1b699c64d0c98c54afd8e7849c804673/rogrepos/rogrepos.py#L10-L32"&gt;사용&lt;/a&gt;했다.&lt;/p&gt;
&lt;p&gt;rogrepos는 아래와 같이 동작하며, 메인 스레드는 사용자 입력을 기다리는 &lt;code&gt;[y/N]&lt;/code&gt; 부분에서 멈추지만,
다른 스레드에서 저장소를 탐색하며 추가 정보를 계속해서 불러오므로 다음 선택지로 넘어갈 때 사용자 입장에서는 지연을 덜 느끼게 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rogrepos
Retrieving organizations from GitHub...

    KeyCastr, &lt;span class="m"&gt;1&lt;/span&gt; public repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt; private repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
    Summernote, &lt;span class="m"&gt;12&lt;/span&gt; public repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt; private repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;

Retrieving &lt;span class="m"&gt;122&lt;/span&gt; repositories from GitHub...

&lt;span class="m"&gt;97&lt;/span&gt; of &lt;span class="m"&gt;122&lt;/span&gt;
lqez/yuna
    Description: yuna
    Updated    : &lt;span class="m"&gt;2013&lt;/span&gt;-11-27 &lt;span class="m"&gt;16&lt;/span&gt;:13:40 / &lt;span class="m"&gt;1477&lt;/span&gt; day&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; ago
    Size       : &lt;span class="m"&gt;100&lt;/span&gt; KB
    Do you really want to delete? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
    This is not a forked project. Are you sure? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
lqez/yuna was deleted.
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;최초의 코드는 아래와 같았다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_repos&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이를 제너레이터로 바꾸면 아래와 같이 바뀌고,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generator_repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_repos&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generator_repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위에서 작성한 Threaded generator로 바꾼 것이 현재의 상태다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ThreadedGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator_repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;반복문 내에 느린 동작이 자주 포함되는 CLI 도구에서는 반복적으로 사용해볼만한 패턴이라고 생각된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;덧) 위 프로젝트를 &lt;a href="https://www.reddit.com/r/github/comments/7jporl/"&gt;/r/github&lt;/a&gt;에 올렸는데, 저장소는 지워져서는 안된다는 의견과
&lt;a href="https://www.reddit.com/r/github/comments/7jporl/rogrepos_remove_outdated_github_repositories_in/"&gt;&lt;code&gt;No Maintenance Intended&lt;/code&gt;&lt;/a&gt; 배지에 대한 댓글이 달렸다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry></feed>