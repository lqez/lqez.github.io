<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Feature creep designer - 2017-11</title><link href="//lqez.github.io/blog/" rel="alternate"></link><link href="//lqez.github.io/blog/feeds/2017-11.atom.xml" rel="self"></link><id>//lqez.github.io/blog/</id><updated>2017-11-30T00:00:00+09:00</updated><entry><title>Under-stand-ing</title><link href="//lqez.github.io/blog/under-stand-ing.html" rel="alternate"></link><published>2017-11-30T00:00:00+09:00</published><updated>2017-11-30T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-11-30:/blog/under-stand-ing.html</id><summary type="html">&lt;p&gt;지난 주 금요일에 있었던 &lt;a href="https://www.facebook.com/publyteam/posts/2199237843435880"&gt;어떤 모임&lt;/a&gt;에서, 이런 얘기를 들었다. (정확히 기억나지는 않지만)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“프로그래머분이 이해할 수 없는 단어를 자꾸 써가며 얘기해서 대화하기가 어려운데, 의사소통을 더 잘 하기 위해 저도 프로그래밍을 좀 배워야겠다는 생각이 들었어요. 도움이 될까요?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;나는 프로그래밍을 배운다고 해서 – 프로그래밍도 범위가 너무 넓어서 어떤 것을 배우시겠다는 것인진 잘 모르겠지만 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;지난 주 금요일에 있었던 &lt;a href="https://www.facebook.com/publyteam/posts/2199237843435880"&gt;어떤 모임&lt;/a&gt;에서, 이런 얘기를 들었다. (정확히 기억나지는 않지만)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“프로그래머분이 이해할 수 없는 단어를 자꾸 써가며 얘기해서 대화하기가 어려운데, 의사소통을 더 잘 하기 위해 저도 프로그래밍을 좀 배워야겠다는 생각이 들었어요. 도움이 될까요?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;나는 프로그래밍을 배운다고 해서 – 프로그래밍도 범위가 너무 넓어서 어떤 것을 배우시겠다는 것인진 잘 모르겠지만 – 
프로그래밍을 주 업무로 하는 사람과의 의사소통이 막연히 개선될 것이라는 기대는 버리는게 좋다고 생각한다.
그래픽 디자이너와 의사소통을 잘 하기 위해서 해당 도구를 배우거나 회화를 배워야 할까? 요리사, 건축가, 유료 아이템 기획자나 퍼포먼스 마케터와 더 잘 대화하려면?
잠깐만 생각해보면 단기간에 익숙하지 않은 영역의 정보를 습득하는 것만으로 타인과의 의사소통이 나아지기를 기대한다는게 별 의미가 없다는 것을 알 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;우리가 원활하게 의사소통하지 못하는 것은 특정 영역에 속하는 어휘나 표현을 이해하지 못함이 아니라
서로 이해하려는, 배려하는 자세가 부족한 것이 훨씬 더 크지 않을까.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.hankookilbo.com/v/43512f5229ad43249195a62b3c737aa0"&gt;급여체&lt;/a&gt;로 대표되는 직장 내 의사소통에서의 모호한 표현들을 덜어내고
전달하고자 하는 내용을 더 명확하게 말하는 것만으로도 더 나은 의사소통이 가능할 것이다.
어떤 일을 왜 하는지, 그리고 지금 이 일 내에서 생기는 물음은 왜 생긴 것이고 앞으로 어떻게 할 것인지를 서로 의논하는 것이 낫지,
서로 전문 분야의 중요성과 어려움만 강조하거나 특정 영역 내에서의 정보량이 많다는 우월감만을 비교해서는 발전적인 대화가 불가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.hongminhee.org/2013/11/12/66778859403/"&gt;디자이너에게 부탁하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radiofun.tumblr.com/post/58410010027/"&gt;디자이너와 일하는 법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radiofun.tumblr.com/post/60279994804/"&gt;개발자와 일하는 법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://minieetea.com/2013/10/archives/537"&gt;기획자가 개발자와 일하는 법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같은 글들이 계속해서 쓰여지는 것을 보면, 사회에서 일반적으로 나눈 직군들 사이의 의사소통이 기본적으로 쉽지 않고,
많은 사람이 어려움을 겪고 있는 것은 사실인 것 같다. 다만, 이러한 글들에서도 공통적으로 얘기하는 것은
다른 영역, 다른 직군에 대해 더 많이 알려고 하는 것보다는 본인의 업무에서의 전문성을 키우고, 일반적인 대화 기술의 향상이 중요하다는 것이다.&lt;/p&gt;
&lt;p&gt;서로가 담당하고 있는 역할을 인정하고 자기 업무에서의 책임을 다하는 것이 더 나은 의사소통이 시작이라고 생각한다.
그래서 위의 질문을 주셨던 분에게는 이렇게 답을 했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“의도를 올바르게 잘 전달하는 것이 중요하다고 생각합니다. 프로그래밍을 배워서 도움이 된다면 괜찮은데,
조금 알게 되었을 때 나 그거 아는데, 라고 섣불리 말하는 건 오히려 방해가 될 수도 있습니다.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이해를 의미하는 영단어 understand의 &lt;a href="https://www.etymonline.com/word/understand"&gt;어원은 under + stand&lt;/a&gt; 이다.
항상 누군가가 나보다 나을 수 있다는 생각과 자세를 갖추고 경청해야 나아갈 수 있다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>The length of Django username</title><link href="//lqez.github.io/blog/the-length-of-django-username.html" rel="alternate"></link><published>2017-11-16T00:00:00+09:00</published><updated>2017-11-16T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-11-16:/blog/the-length-of-django-username.html</id><summary type="html">&lt;p&gt;오래 전, &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;에서 제공하는 사용자 모델의 이름을 저장하는 기본 필드의 길이가 왜 30자인가에 대해 의문을 가진 적이 있었다.
필드의 길이가 짧거나 길어서 그런 생각을 했던건 아니고, 왜 하필 ‘30’ 일까에 대한 의문이었다.
물론 한국 사람들의 이름만 생각하면 30자면 충분하다. 한국 국적을 가진 사람 중에 가장 긴 이름을 가진 사람은 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;오래 전, &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;에서 제공하는 사용자 모델의 이름을 저장하는 기본 필드의 길이가 왜 30자인가에 대해 의문을 가진 적이 있었다.
필드의 길이가 짧거나 길어서 그런 생각을 했던건 아니고, 왜 하필 ‘30’ 일까에 대한 의문이었다.
물론 한국 사람들의 이름만 생각하면 30자면 충분하다. 한국 국적을 가진 사람 중에 가장 긴 이름을 가진 사람은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘박 하늘별님구름햇님보다사랑스러우리’(17자)&lt;/li&gt;
&lt;li&gt;‘프라이인드로스테쭈젠댄마리소피아수인레나테엘리자벳피아루이제’(30자)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;출처: &lt;a href="http://www.hani.co.kr/arti/society/society_general/399615.html"&gt;http://www.hani.co.kr/arti/society/society_general/399615.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;그 뒤로 잊고 살았는데, 얼마 전 발표된 &lt;a href="https://docs.djangoproject.com/en/dev/releases/2.0/"&gt;Django 2.0 RC 릴리즈 노트&lt;/a&gt;를 보다가,
&lt;a href="https://docs.djangoproject.com/en/dev/releases/2.0/#abstractuser-last-name-max-length-increased-to-150"&gt;사용자 이름 필드의 길이가 150자로 바뀐다&lt;/a&gt;는 항목이 눈에 띄었다.&lt;/p&gt;
&lt;p&gt;하필이면, 왜 150자일까? 30자도 이상했지만 150자도 이상해서 &lt;a href="https://git-scm.com/docs/git-blame"&gt;git blame&lt;/a&gt;을 통해 길이를 바꾼 커밋을 찾아보니,
예전보다 늘렸다는게 아니라 150자로 줄였다는 커밋이 마지막이었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/commit/780bddf75b93784470a2e352ed44ee35a751d667"&gt;Decreased User.username maxlength to 150 characters.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 같이 커밋된 도움말의 문서를 보면 다음과 같이 설명되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We considered an increase to 254 characters to more easily allow the use of
email addresses (which are limited to 254 characters) as usernames but rejected
it due to a MySQL limitation.  When using the &lt;code&gt;utf8mb4&lt;/code&gt; encoding (recommended
for proper Unicode support), MySQL can only create unique indexes with 191
characters by default. Therefore, if you need a longer length, please use a
custom user model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이전에 254자로 늘린 이력이 있었는데, MySQL 등에서 유니코드 문자를 저장하는데 주로 쓰이는 &lt;code&gt;utf8mb4&lt;/code&gt; 인코딩을 사용하는 경우에
인덱스 지정에 문제가 생길 수 있어 150자로 줄이는 선택을 했던 모양이다.
254자로는 언제 늘렸나 보아하니, 2년 전에 이미 머지가 되었던 이력이 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/pull/5497"&gt;Increased User.username max_length to 254 characters.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 이전에 이미 사용자 이름을 늘리는 것에 대한 PR이 올라왔었지만, 도움말 등을 작성하는게 미진하여 머지되지는 않았다.
오픈소스 프로젝트에서는 정말 흔한 일이라고 생각한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/pull/4250"&gt;Fixed #20846 -- Change username max_length to 254&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;드디어, 사용자 이름을 늘리는 것에 대한 &lt;a href="https://code.djangoproject.com/ticket/20846"&gt;티켓 #20846&lt;/a&gt;을 찾았다. 
이 티켓을 읽어보면 다음과 같은 이유로 사용자 이름의 길이를 늘리자고 건의하고 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nowadays it is common to use e-mail addresses as usernames (especially if using external auth sources such as OAuth),
but while the email field is reasonably long (75), the 30 characters for the username seems too short for modern sites.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OAuth 등을 사용하면 이메일 주소를 사용자 이름에 넣는 경우가 흔한데, 이메일 필드의 길이는 상대적으로 긴 75자인데 비해 사용자 이름은 짧으니 늘려보자는 의견이다.
뿐만 아니라, 사용자 이름에 대한 프로그래머들의 흔한 착각에 대해서도 언급하고 있다.
해당 글에서는 프로그래머들에 가지고 있는 흔한 가정들이 잘못되었음을 꼬집고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/"&gt;Falsehoods Programmers Believe About Names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자, 이제 거의 마지막까지 왔다. 위 글은 존 그레이엄-커밍의 블로그 글을 링크하고 있다.
대부 존 그레이엄-커밍이 웹 서비스에 가입하다 자신이 이름에 잘못된 문자(invalid characters)가 있다는 메세지에 분노하여 남긴 글이다.
이름에 하이픈(-)이 포함되어 있어서 여러 사이트에서 문제를 겪어왔던 것 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jgc.org/2010/06/your-last-name-contains-invalid.html"&gt;Your last name contains invalid characters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;덧1) 어느 나라나 악플러는 있기 마련인 것 같다. 존 그레이엄-커밍의 블로그 포스팅에도 아래와 같은 사려깊지 못한 댓글이 달려있다. 흠.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Change your name. Not that big of a deal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;덧2) 이메일 필드는 여전히 75자일까? 그렇지 않다. 사용자 이름 필드가 늘어나기 1년 전에 이미 254자로 늘어나 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/pull/2867"&gt;Fixed #20631 -- Increased the default EmailField max_length to 254.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.djangoproject.com/ticket/20631"&gt;https://code.djangoproject.com/ticket/20631&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address"&gt;What is the maximum length of a valid email address?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc5321#section-4.5.3"&gt;RFC5321 #4.5.3.1, Size Limits and Minimums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;덧3) MySQL의 InnoDB 엔진에서 문자열에 대한 인덱스는 767바이트로 제한되어 있고,
1글자에 4바이트를 사용하는 &lt;code&gt;utf8mb4&lt;/code&gt; 인코딩에서는 767 ÷ 4 ≈ 191 이기 때문에 191자로 제한된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-conversion.html"&gt;https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-conversion.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>The Curse of Understanding</title><link href="//lqez.github.io/blog/the-curse-of-understanding.html" rel="alternate"></link><published>2017-11-13T00:00:00+09:00</published><updated>2017-11-13T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-11-13:/blog/the-curse-of-understanding.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;The curse of the monad is that once you get the epiphany, once you understand, 
you lose the ability to explain it to anybody else.&lt;/p&gt;
&lt;p&gt;Douglas Crockford - &lt;a href="https://www.youtube.com/watch?v=dkZFtimgAcM"&gt;‘Monads &amp;amp; Gonads’ at YUIConf 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)"&gt;모나드&lt;/a&gt;는 함수형 프로그래밍 언어에 대해서 얘기할 때 거의 매번 언급되는 주제이다.
모나드라는 개념이 절차형 프로그래밍 언어에 익숙한 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;The curse of the monad is that once you get the epiphany, once you understand, 
you lose the ability to explain it to anybody else.&lt;/p&gt;
&lt;p&gt;Douglas Crockford - &lt;a href="https://www.youtube.com/watch?v=dkZFtimgAcM"&gt;‘Monads &amp;amp; Gonads’ at YUIConf 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)"&gt;모나드&lt;/a&gt;는 함수형 프로그래밍 언어에 대해서 얘기할 때 거의 매번 언급되는 주제이다.
모나드라는 개념이 절차형 프로그래밍 언어에 익숙한 사람들에게는 익숙한 개념이 아니기 때문에, 
&lt;a href="https://e.xtendo.org/haskell/ko/monad_fear/slide"&gt;모나드 괴담&lt;/a&gt; 같은 글이 쓰여질 정도다. (해당 문서는 매우 훌륭하다!)&lt;/p&gt;
&lt;p&gt;어떤 개념을 비로소 깨닫는 순간을 &lt;a href="https://www.merriam-webster.com/dictionary/aha%20moment"&gt;‘Aha moment’&lt;/a&gt;라 부르기도 하는데,
더글라스 크록포드의 말을 인용하자면, 모나드를 이해하는 Aha moment를 겪는 순간,
다른 사람에게 모나드를 설명할 수 없게 되는 &lt;a href="https://stackoverflow.com/questions/19544794/what-is-crockfords-law"&gt;저주&lt;/a&gt;에 걸린다고 한다.&lt;/p&gt;
&lt;p&gt;그런데, 모나드만 그러한가? 세상의 많은 이해와 문제들이 비슷한 상황에 놓여 있다.
간략화한 적당한 비유를 통해 설명하는게 처음 접하는 사람들에게 쉽게 느껴지겠지만, 대부분의 경우는 결국 불필요한 오해를 가져온다.
&lt;em&gt;프로그래밍이란 무엇인가요?&lt;/em&gt; &lt;em&gt;캐시(cache)는 쓰면 좋은가요?&lt;/em&gt; 정확하게 이해하려면 많은 정보와 이해를 필요로 하지만 과연 어디서부터 얼만큼 설명할 것인가?
한 개인이 이해한 것을 다른 사람에게 설명하는 일은 매우 어렵다. 이해와 사전 지식이 다르기 때문에 자신이 어떤 문제에 대해 깨달은 길을 그대로 다른 사람에게 걷게 해도, 그 사람은 깨닫거나 이해하지 못할 수 있다.&lt;/p&gt;
&lt;p&gt;도리어 경험과 노력이 부족하여 충분히 이해하지 못하거나 깨닫지 못한 ‘가짜 전문가’가 더 많이 얘기하고 설명하는 경우도 보게 된다.
이런 사람은 틀린 정보를 거부감 없이 받아들이고, 해석하려고 하지 않으며, 흘려 들은 정보를 마음대로 가공하여 다른 사람에게 조언하거나 추천하기도 한다.
상대적으로 많은 것을 제대로 알고 있는 사람은 다음의 문제를 겪기도 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문제에 대해 설명하는 경우&lt;ul&gt;
&lt;li&gt;많은 사람을 위해 온전히 설명하면 충분히 쉽게 말하지 못해 ‘잘 모르는 사람’ 취급을 받는다.&lt;/li&gt;
&lt;li&gt;자세한 것을 건너뛰고 핵심만 말하면 엉뚱한 얘기를 하는 ‘잘 모르는 사람’이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;설명하지 않고 침묵하는 경우&lt;ul&gt;
&lt;li&gt;마찬가지로 ‘잘 모르는 사람’ 취급을 받는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나는 이런 문제들을 일반화하여 &lt;strong&gt;이해의 저주(The Curse of Understanding)&lt;/strong&gt;라고 부르고 싶다.&lt;/p&gt;
&lt;p&gt;덧) 이 생각을 &lt;a href="https://twitter.com/lqez/status/759061524820299776"&gt;트윗&lt;/a&gt;으로 썼더니, &lt;a href="https://twitter.com/tebica"&gt;@tebica&lt;/a&gt; 님이 이에 공감하여 블로그 &lt;a href="http://earlybird.kr/1938"&gt;포스팅&lt;/a&gt;을 남겼던 적이 있다. 
그리고, 나는 아직 모나드를 이해하지 못했다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry></feed>