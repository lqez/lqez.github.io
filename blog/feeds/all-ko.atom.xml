<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Feature creep designer</title><link href="//lqez.github.io/blog/" rel="alternate"></link><link href="//lqez.github.io/blog/feeds/all-ko.atom.xml" rel="self"></link><id>//lqez.github.io/blog/</id><updated>2018-01-22T00:00:00+09:00</updated><entry><title>Weird result from Naver search</title><link href="//lqez.github.io/blog/weird-result-from-naver-search.html" rel="alternate"></link><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2018-01-22:/blog/weird-result-from-naver-search.html</id><summary type="html">&lt;p&gt;예전부터 네이버 블로그 검색에서 ‘최신순’ 검색을 했을 때 검색어와 무관한 결과가 나와서 갸웃거린 경우가 있었는데, 그냥 네이버 검색이 별론가 생각하고 넘어갔었다.&lt;/p&gt;
&lt;p&gt;오늘은 &lt;a href="https://en.wikipedia.org/wiki/BMW_X3#Third_generation_(G01;_2018%E2%80%93present)"&gt;BMW X3 (G01)&lt;/a&gt;이 출시되었다는 얘기를 듣고 관심이 생겨 네이버에서 검색해보았다.
역시나 최신 기준으로 검색 결과를 보았을 때 이상한 콘텐츠들이 주를 이루지만, 속는 셈 치고 들어가 콘텐츠를 살펴보았다 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;예전부터 네이버 블로그 검색에서 ‘최신순’ 검색을 했을 때 검색어와 무관한 결과가 나와서 갸웃거린 경우가 있었는데, 그냥 네이버 검색이 별론가 생각하고 넘어갔었다.&lt;/p&gt;
&lt;p&gt;오늘은 &lt;a href="https://en.wikipedia.org/wiki/BMW_X3#Third_generation_(G01;_2018%E2%80%93present)"&gt;BMW X3 (G01)&lt;/a&gt;이 출시되었다는 얘기를 듣고 관심이 생겨 네이버에서 검색해보았다.
역시나 최신 기준으로 검색 결과를 보았을 때 이상한 콘텐츠들이 주를 이루지만, 속는 셈 치고 들어가 콘텐츠를 살펴보았다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Search result" src="./images/2018-01/weird-naver-search-01.png"&gt;&lt;/p&gt;
&lt;p&gt;하지만 포스팅 본문에는 검색 결과에서 보여진 문장이 보이지 않는다.
스타일을 통해 숨겨졌나 싶어 개발자 도구를 통해 소스를 보니, 역시나 자동 생성된 문자들이 &lt;code&gt;hidden="hidden"&lt;/code&gt; 속성과 함께 본문 사이사이에 포함되어 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font-family: Tahoma; font-size: 12pt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    성능점검과 경정비까지
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font-family: 나눔고딕,NanumGothic; font-size: 12px;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    기아부터 여자가타기좋은되어야 렉스턴W할수 G25했다고 스마트해서 엠파크허브좋다.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;보아하니 &lt;code&gt;기아&lt;/code&gt;, &lt;code&gt;스마트&lt;/code&gt; 등 자동차 관련 키워드와 한국어에서 사용하는 관용구와 조사들을 자동 생성해주는 한국형 블로그 마케팅 도구가 있는 것 같고, 이 도구를 중고차 딜러들이 많이 사용하고 있다고 추측할 수 있겠다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hidden attributes" src="./images/2018-01/weird-naver-search-02.png"&gt;&lt;/p&gt;
&lt;p&gt;네이버는 이런 문제를 뻔히 알고 있을텐데, 자동 생성되어 맥락과 의미가 없는 숨겨진 문자열들을 검색 대상에 포함시키지 않는다면 검색 결과 개선에 도움이 되지 않을까 싶다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>The end is just another beginning</title><link href="//lqez.github.io/blog/the-end-is-just-another-beginning.html" rel="alternate"></link><published>2017-12-21T00:00:00+09:00</published><updated>2017-12-21T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-12-21:/blog/the-end-is-just-another-beginning.html</id><summary type="html">&lt;p&gt;&lt;img alt="The Last Moment" src="./images/2017-12/last-moment-mba.jpg"&gt;&lt;/p&gt;
&lt;p&gt;2017년을 마지막으로 스마트스터디를 퇴직한다.&lt;/p&gt;
&lt;p&gt;자신이 직접 디자인한 결재 양식으로 작성된 사직서와 공동대표 및 등기이사 사임 문서에 자필로 서명하는 일은 아무래도 낯선 일일 수밖에 없다.
스스로 선택한 일이라 마음은 무겁지만 불편하지는 않다.
지난 시간 동안 많은, 다양한 일이 있었고, 이제는 내가 보탬이 되지 않는다 생각하여 떠나는 것뿐이다.&lt;/p&gt;
&lt;p&gt;회사와 일에 지나치게 몰입하면 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="The Last Moment" src="./images/2017-12/last-moment-mba.jpg"&gt;&lt;/p&gt;
&lt;p&gt;2017년을 마지막으로 스마트스터디를 퇴직한다.&lt;/p&gt;
&lt;p&gt;자신이 직접 디자인한 결재 양식으로 작성된 사직서와 공동대표 및 등기이사 사임 문서에 자필로 서명하는 일은 아무래도 낯선 일일 수밖에 없다.
스스로 선택한 일이라 마음은 무겁지만 불편하지는 않다.
지난 시간 동안 많은, 다양한 일이 있었고, 이제는 내가 보탬이 되지 않는다 생각하여 떠나는 것뿐이다.&lt;/p&gt;
&lt;p&gt;회사와 일에 지나치게 몰입하면 삶 자체가 그 안에 매몰되어 마치 인생의 전부인 양 생각되기 쉽다.
직원으로 일했던 회사에서도 그러기가 쉬운데, 공동창업자로 시작했던 회사는 의식적으로 노력하지 않으면 일이 곧 삶이 된다.
지난 몇 년간 그랬었고, 그 때문에 객관성을 잃어버리며 동료와 주변 사람들을 힘들게 했다.&lt;/p&gt;
&lt;p&gt;힘듦에 내 책임이 크고, 한 분 한 분에게 인사드리고 죄송하다는 말씀을 드리지 못해 더 죄송하다.&lt;/p&gt;
&lt;p&gt;지난 시간을 돌아보며 정리하여 남기고 싶은 말이 많지만, 개인적인 부분이 많아 저장소와 회선을 낭비해가며 남기고 전할 만큼 의미가 있지 않으니,
아무것도 모르는 상태에서 창업하며 겪었던 일 중, 창업한다면 대체로 한 번쯤 생각해볼 만한 것에 대한 의견을 남겨본다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;공동창업은 좋은가&lt;/h4&gt;
&lt;p&gt;기본적으로 좋다고 생각한다. 일단 창업하고 나면 기쁜 일보다는 힘든 일이 훨씬 더 많기 마련인데,
정말 힘들 때 등을 맞대고 고민을 함께할 수 있는 상대는 배우자나 친구보다는, 아무래도 맥락을 더 많이 이해하는 다른 공동창업자일 수밖에 없다.&lt;/p&gt;
&lt;p&gt;좋아하는 것이 비슷한 사람보다, 싫어하는 것에 공통점이 있는 사람과 창업하는 게 낫다고 생각한다. 무언가를 좋아하는 것은 너무 쉽게 달라진다.
하지만, 사회에 바꾸고 싶은 것이 있거나 기존 산업에서 싫은 것이 있다면, 아무래도 더 오래 같은 곳을 바라보며 갈 수 있지 않을까.&lt;/p&gt;
&lt;p&gt;자신의 부족한 점을 채울 수 있는 사람과 공동창업하는 것도 잘 모르겠다.
일이 잘 될 때는 자기가 잘해서라고 생각하고, 잘 안될 때는 다른 사람을 탓하는 게 인간이다.
핵심 역량을 같이 고민하고 서로 성장에 도움 될 수 있는 사람이 공동창업을 하는 게 낫다고 생각한다.
창업가가 가지고 있지 못한 능력은 이후에 정말 필요해질 때에 다른 사람을 채용하거나 외부 회사를 통해 보강하는 게 좋을 것 같다.&lt;/p&gt;
&lt;h3&gt;어떻게 알릴 것인가&lt;/h3&gt;
&lt;p&gt;스스로 필요해서, 해야 한다고 생각해서 시작한 사업은 일단 본인이 미친 듯이 쓰면서 주변의 가까운 사람에게 알리는 게 기본이다.
하지만 모든 사업이 &lt;a href="http://www.piedpipersent.com/%EA%B0%9C%EB%B0%A5-%EB%A8%B9%EA%B8%B0eating-your-own-dog-food/"&gt;개밥 먹기&lt;/a&gt;를 할 수 있는 것은 아니고, 많은 경우 주변 사람들은 일반적인 지표를 주지 못하는 경우가 많다.
그러므로 불필요하게 주변 사람들 괴롭히지 말고, 최선의 매체를 통해서 적은 비용으로 빠르게 홍보를 시도해보고 빠르게 실패하는 과정을 반복하면 좋을 것 같다.&lt;/p&gt;
&lt;h3&gt;회사 이름은 어떻게 정할까&lt;/h3&gt;
&lt;p&gt;준곰(&lt;a href="https://twitter.com/joongom"&gt;@joongom&lt;/a&gt;)님과 며칠 전에 얘기하다, 이 문제에 대해서도 생각해보게 되었다.
조직의 문화에 대한 지향점을 이름에 넣는 편이 좋은지, 서비스나 제품을 담는 게 좋은지 늘 고민이 된다.
어떻게 일하면 좋을까를 고민해서 회사 이름을 지었다가, 외부와 의사소통 시에 답답해서 – 그래서 회사 이름이 뭐라고? – 회사 이름을 주력 제품이나 서비스명으로 바꾸는 경우도 봐왔고, 반대로 제품과 같게 지었다가 성장하는 중에 주력 사업이 바뀌면서 회사 이름이 따로 놀기도 한다.&lt;/p&gt;
&lt;p&gt;개인적으로는 초기부터 제품/서비스 브랜딩을 따로 한다는 전제하에, ‘어떻게’를 회사 이름으로 선택할 것 같다.
이후에 ‘무엇을’이 더 명확해지는 때에 회사 이름을 바꿀 수도 있다고 생각한다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;앞으로 어떤 조직에 속할지, 어떤 일을 할지 아직 결정한 것은 아무것도 없다.
다만, 몇 년 전부터 하고 싶었던 잡지를 시작하는 것과 글쓰기와 번역과 관련된 서비스를 하나 만들어보는 것이 사소한 목표다.
매일 매일 조금씩이라도 코딩을 계속하고 사람들을 만나고 싶다.&lt;/p&gt;
&lt;p&gt;영화 매트릭스에 &lt;a href="https://www.youtube.com/watch?v=5wqd-ETXrOw"&gt;이런 대사&lt;/a&gt;가 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;“Everything that has a beginning has an end.”&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;p&gt;좋아하는 문장이지만 더 좋아하는 이 문장을 덧붙이고 싶다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;“The end is just another beginning.”&lt;/h3&gt;
&lt;/blockquote&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Threaded Generator in Python</title><link href="//lqez.github.io/blog/threaded-generator-in-python.html" rel="alternate"></link><published>2017-12-20T00:00:00+09:00</published><updated>2017-12-20T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-12-20:/blog/threaded-generator-in-python.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Command-line_interface"&gt;커맨드라인 인터페이스(CLI)&lt;/a&gt;를 가진 프로그램을 만들면서 &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_I/O"&gt;비동기 처리&lt;/a&gt;를 시도한 적이 없었다.
대부분 선택지를 출력한 후에 사용자로부터 값을 입력받으면 다음 동작을 수행하는 것을 반복하기 때문에 일반적인 &lt;a href="https://en.wikipedia.org/wiki/Thread_(computing)#Single_threading"&gt;단일 스레드&lt;/a&gt;로 작성해왔다.&lt;/p&gt;
&lt;p&gt;이번에 만든 CLI 프로그램인 &lt;a href="https://github.com/lqez/rogrepos"&gt;rogrepos&lt;/a&gt;는 GitHub에서 오픈소스 활동을 오래 하다 보면
수정사항을 작성하기 위한 목적으로 &lt;a href="https://en.wikipedia.org/wiki/Fork_(software_development)"&gt;포크&lt;/a&gt;했다가
더는 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Command-line_interface"&gt;커맨드라인 인터페이스(CLI)&lt;/a&gt;를 가진 프로그램을 만들면서 &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_I/O"&gt;비동기 처리&lt;/a&gt;를 시도한 적이 없었다.
대부분 선택지를 출력한 후에 사용자로부터 값을 입력받으면 다음 동작을 수행하는 것을 반복하기 때문에 일반적인 &lt;a href="https://en.wikipedia.org/wiki/Thread_(computing)#Single_threading"&gt;단일 스레드&lt;/a&gt;로 작성해왔다.&lt;/p&gt;
&lt;p&gt;이번에 만든 CLI 프로그램인 &lt;a href="https://github.com/lqez/rogrepos"&gt;rogrepos&lt;/a&gt;는 GitHub에서 오픈소스 활동을 오래 하다 보면
수정사항을 작성하기 위한 목적으로 &lt;a href="https://en.wikipedia.org/wiki/Fork_(software_development)"&gt;포크&lt;/a&gt;했다가
더는 사용되지 않고 방치된 저장소들이 쌓이는데, 이들을 손쉽게 정리하기 위한 도구이다.&lt;/p&gt;
&lt;p&gt;GitHub에서 저장소를 삭제하기 위해서는 확인 및 안전 차원에서 저장소 이름을 다시 한 번 입력해야 하는데,
정리해야 하는 저장소가 많으면 이 작업을 반복하는 것이 여간 귀찮은 일이 아니다.
rogrepos를 처음에는 기존처럼 비동기 처리 없이 단일 스레드로 작성하였는데 &lt;a href="https://developer.github.com/"&gt;GitHub API&lt;/a&gt; 호출이 여간 느린 게 아니라,
실제로 쓰기에는 실용적이지 못했다. 저장소 목록을 얻어오는 것은 오래 걸리더라도 한 번 기다리면 되니까 괜찮지만,
포크된 저장소인지 여부 등 정보를 추가로 얻어오려면 매번 기다려야 하는 것이 문제였다.&lt;/p&gt;
&lt;p&gt;이 문제를 코드를 조금만 고치면서 쓸만하게 만들려고 찾아보니, 반복문으로 작성된 코드를 &lt;a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)"&gt;제너레이터&lt;/a&gt;를 사용하도록 고치고
제너레이터를 다른 스레드에서 채우도록 변경하는 것이 좋아 보였다.
값을 생성하고 사용할 때에 문제가 없도록 스레드에 안전한 &lt;a href="https://docs.python.org/3/library/queue.html"&gt;큐(Queue)&lt;/a&gt;를 사용하면 기존의 동기 코드를 크게 건드리지 않고 백그라운드에서 추가 작업을 진행할 수 있다.
이와 같은 동작을 Threaded Generator라는 이름으로 만들어놓은 &lt;a href="https://gist.github.com/everilae/9697228"&gt;코드 조각(gist)&lt;/a&gt;이 있어,
rogrepos에서 &lt;a href="https://github.com/lqez/rogrepos/blob/5513ea4e1b699c64d0c98c54afd8e7849c804673/rogrepos/rogrepos.py#L10-L32"&gt;사용&lt;/a&gt;했다.&lt;/p&gt;
&lt;p&gt;rogrepos는 아래와 같이 동작하며, 메인 스레드는 사용자 입력을 기다리는 &lt;code&gt;[y/N]&lt;/code&gt; 부분에서 멈추지만,
다른 스레드에서 저장소를 탐색하며 추가 정보를 계속해서 불러오므로 다음 선택지로 넘어갈 때 사용자 입장에서는 지연을 덜 느끼게 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rogrepos
Retrieving organizations from GitHub...

    KeyCastr, &lt;span class="m"&gt;1&lt;/span&gt; public repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt; private repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
    Summernote, &lt;span class="m"&gt;12&lt;/span&gt; public repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt; private repo&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;

Retrieving &lt;span class="m"&gt;122&lt;/span&gt; repositories from GitHub...

&lt;span class="m"&gt;97&lt;/span&gt; of &lt;span class="m"&gt;122&lt;/span&gt;
lqez/yuna
    Description: yuna
    Updated    : &lt;span class="m"&gt;2013&lt;/span&gt;-11-27 &lt;span class="m"&gt;16&lt;/span&gt;:13:40 / &lt;span class="m"&gt;1477&lt;/span&gt; day&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; ago
    Size       : &lt;span class="m"&gt;100&lt;/span&gt; KB
    Do you really want to delete? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
    This is not a forked project. Are you sure? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
lqez/yuna was deleted.
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;최초의 코드는 아래와 같았다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_repos&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이를 제너레이터로 바꾸면 아래와 같이 바뀌고,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generator_repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_repos&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generator_repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위에서 작성한 Threaded generator로 바꾼 것이 현재의 상태다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ThreadedGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator_repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;반복문 내에 느린 동작이 자주 포함되는 CLI 도구에서는 반복적으로 사용해볼만한 패턴이라고 생각된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;덧) 위 프로젝트를 &lt;a href="https://www.reddit.com/r/github/comments/7jporl/"&gt;/r/github&lt;/a&gt;에 올렸는데, 저장소는 지워져서는 안된다는 의견과
&lt;a href="https://www.reddit.com/r/github/comments/7jporl/rogrepos_remove_outdated_github_repositories_in/"&gt;&lt;code&gt;No Maintenance Intended&lt;/code&gt;&lt;/a&gt; 배지에 대한 댓글이 달렸다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Under-stand-ing</title><link href="//lqez.github.io/blog/under-stand-ing.html" rel="alternate"></link><published>2017-11-30T00:00:00+09:00</published><updated>2017-11-30T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-11-30:/blog/under-stand-ing.html</id><summary type="html">&lt;p&gt;지난 주 금요일에 있었던 &lt;a href="https://www.facebook.com/publyteam/posts/2199237843435880"&gt;어떤 모임&lt;/a&gt;에서, 이런 얘기를 들었다. (정확히 기억나지는 않지만)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“프로그래머분이 이해할 수 없는 단어를 자꾸 써가며 얘기해서 대화하기가 어려운데, 의사소통을 더 잘 하기 위해 저도 프로그래밍을 좀 배워야겠다는 생각이 들었어요. 도움이 될까요?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;나는 프로그래밍을 배운다고 해서 – 프로그래밍도 범위가 너무 넓어서 어떤 것을 배우시겠다는 것인진 잘 모르겠지만 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;지난 주 금요일에 있었던 &lt;a href="https://www.facebook.com/publyteam/posts/2199237843435880"&gt;어떤 모임&lt;/a&gt;에서, 이런 얘기를 들었다. (정확히 기억나지는 않지만)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“프로그래머분이 이해할 수 없는 단어를 자꾸 써가며 얘기해서 대화하기가 어려운데, 의사소통을 더 잘 하기 위해 저도 프로그래밍을 좀 배워야겠다는 생각이 들었어요. 도움이 될까요?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;나는 프로그래밍을 배운다고 해서 – 프로그래밍도 범위가 너무 넓어서 어떤 것을 배우시겠다는 것인진 잘 모르겠지만 – 
프로그래밍을 주 업무로 하는 사람과의 의사소통이 막연히 개선될 것이라는 기대는 버리는게 좋다고 생각한다.
그래픽 디자이너와 의사소통을 잘 하기 위해서 해당 도구를 배우거나 회화를 배워야 할까? 요리사, 건축가, 유료 아이템 기획자나 퍼포먼스 마케터와 더 잘 대화하려면?
잠깐만 생각해보면 단기간에 익숙하지 않은 영역의 정보를 습득하는 것만으로 타인과의 의사소통이 나아지기를 기대한다는게 별 의미가 없다는 것을 알 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;우리가 원활하게 의사소통하지 못하는 것은 특정 영역에 속하는 어휘나 표현을 이해하지 못함이 아니라
서로 이해하려는, 배려하는 자세가 부족한 것이 훨씬 더 크지 않을까.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.hankookilbo.com/v/43512f5229ad43249195a62b3c737aa0"&gt;급여체&lt;/a&gt;로 대표되는 직장 내 의사소통에서의 모호한 표현들을 덜어내고
전달하고자 하는 내용을 더 명확하게 말하는 것만으로도 더 나은 의사소통이 가능할 것이다.
어떤 일을 왜 하는지, 그리고 지금 이 일 내에서 생기는 물음은 왜 생긴 것이고 앞으로 어떻게 할 것인지를 서로 의논하는 것이 낫지,
서로 전문 분야의 중요성과 어려움만 강조하거나 특정 영역 내에서의 정보량이 많다는 우월감만을 비교해서는 발전적인 대화가 불가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.hongminhee.org/2013/11/12/66778859403/"&gt;디자이너에게 부탁하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radiofun.tumblr.com/post/58410010027/"&gt;디자이너와 일하는 법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radiofun.tumblr.com/post/60279994804/"&gt;개발자와 일하는 법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://minieetea.com/2013/10/archives/537"&gt;기획자가 개발자와 일하는 법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같은 글들이 계속해서 쓰여지는 것을 보면, 사회에서 일반적으로 나눈 직군들 사이의 의사소통이 기본적으로 쉽지 않고,
많은 사람이 어려움을 겪고 있는 것은 사실인 것 같다. 다만, 이러한 글들에서도 공통적으로 얘기하는 것은
다른 영역, 다른 직군에 대해 더 많이 알려고 하는 것보다는 본인의 업무에서의 전문성을 키우고, 일반적인 대화 기술의 향상이 중요하다는 것이다.&lt;/p&gt;
&lt;p&gt;서로가 담당하고 있는 역할을 인정하고 자기 업무에서의 책임을 다하는 것이 더 나은 의사소통이 시작이라고 생각한다.
그래서 위의 질문을 주셨던 분에게는 이렇게 답을 했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“의도를 올바르게 잘 전달하는 것이 중요하다고 생각합니다. 프로그래밍을 배워서 도움이 된다면 괜찮은데,
조금 알게 되었을 때 나 그거 아는데, 라고 섣불리 말하는 건 오히려 방해가 될 수도 있습니다.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이해를 의미하는 영단어 understand의 &lt;a href="https://www.etymonline.com/word/understand"&gt;어원은 under + stand&lt;/a&gt; 이다.
항상 누군가가 나보다 나을 수 있다는 생각과 자세를 갖추고 경청해야 나아갈 수 있다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>The length of Django username</title><link href="//lqez.github.io/blog/the-length-of-django-username.html" rel="alternate"></link><published>2017-11-16T00:00:00+09:00</published><updated>2017-11-16T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-11-16:/blog/the-length-of-django-username.html</id><summary type="html">&lt;p&gt;오래 전, &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;에서 제공하는 사용자 모델의 이름을 저장하는 기본 필드의 길이가 왜 30자인가에 대해 의문을 가진 적이 있었다.
필드의 길이가 짧거나 길어서 그런 생각을 했던건 아니고, 왜 하필 ‘30’ 일까에 대한 의문이었다.
물론 한국 사람들의 이름만 생각하면 30자면 충분하다. 한국 국적을 가진 사람 중에 가장 긴 이름을 가진 사람은 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;오래 전, &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;에서 제공하는 사용자 모델의 이름을 저장하는 기본 필드의 길이가 왜 30자인가에 대해 의문을 가진 적이 있었다.
필드의 길이가 짧거나 길어서 그런 생각을 했던건 아니고, 왜 하필 ‘30’ 일까에 대한 의문이었다.
물론 한국 사람들의 이름만 생각하면 30자면 충분하다. 한국 국적을 가진 사람 중에 가장 긴 이름을 가진 사람은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘박 하늘별님구름햇님보다사랑스러우리’(17자)&lt;/li&gt;
&lt;li&gt;‘프라이인드로스테쭈젠댄마리소피아수인레나테엘리자벳피아루이제’(30자)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;출처: &lt;a href="http://www.hani.co.kr/arti/society/society_general/399615.html"&gt;http://www.hani.co.kr/arti/society/society_general/399615.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;그 뒤로 잊고 살았는데, 얼마 전 발표된 &lt;a href="https://docs.djangoproject.com/en/dev/releases/2.0/"&gt;Django 2.0 RC 릴리즈 노트&lt;/a&gt;를 보다가,
&lt;a href="https://docs.djangoproject.com/en/dev/releases/2.0/#abstractuser-last-name-max-length-increased-to-150"&gt;사용자 이름 필드의 길이가 150자로 바뀐다&lt;/a&gt;는 항목이 눈에 띄었다.&lt;/p&gt;
&lt;p&gt;하필이면, 왜 150자일까? 30자도 이상했지만 150자도 이상해서 &lt;a href="https://git-scm.com/docs/git-blame"&gt;git blame&lt;/a&gt;을 통해 길이를 바꾼 커밋을 찾아보니,
예전보다 늘렸다는게 아니라 150자로 줄였다는 커밋이 마지막이었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/commit/780bddf75b93784470a2e352ed44ee35a751d667"&gt;Decreased User.username maxlength to 150 characters.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 같이 커밋된 도움말의 문서를 보면 다음과 같이 설명되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We considered an increase to 254 characters to more easily allow the use of
email addresses (which are limited to 254 characters) as usernames but rejected
it due to a MySQL limitation.  When using the &lt;code&gt;utf8mb4&lt;/code&gt; encoding (recommended
for proper Unicode support), MySQL can only create unique indexes with 191
characters by default. Therefore, if you need a longer length, please use a
custom user model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이전에 254자로 늘린 이력이 있었는데, MySQL 등에서 유니코드 문자를 저장하는데 주로 쓰이는 &lt;code&gt;utf8mb4&lt;/code&gt; 인코딩을 사용하는 경우에
인덱스 지정에 문제가 생길 수 있어 150자로 줄이는 선택을 했던 모양이다.
254자로는 언제 늘렸나 보아하니, 2년 전에 이미 머지가 되었던 이력이 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/pull/5497"&gt;Increased User.username max_length to 254 characters.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 이전에 이미 사용자 이름을 늘리는 것에 대한 PR이 올라왔었지만, 도움말 등을 작성하는게 미진하여 머지되지는 않았다.
오픈소스 프로젝트에서는 정말 흔한 일이라고 생각한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/pull/4250"&gt;Fixed #20846 -- Change username max_length to 254&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;드디어, 사용자 이름을 늘리는 것에 대한 &lt;a href="https://code.djangoproject.com/ticket/20846"&gt;티켓 #20846&lt;/a&gt;을 찾았다. 
이 티켓을 읽어보면 다음과 같은 이유로 사용자 이름의 길이를 늘리자고 건의하고 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nowadays it is common to use e-mail addresses as usernames (especially if using external auth sources such as OAuth),
but while the email field is reasonably long (75), the 30 characters for the username seems too short for modern sites.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OAuth 등을 사용하면 이메일 주소를 사용자 이름에 넣는 경우가 흔한데, 이메일 필드의 길이는 상대적으로 긴 75자인데 비해 사용자 이름은 짧으니 늘려보자는 의견이다.
뿐만 아니라, 사용자 이름에 대한 프로그래머들의 흔한 착각에 대해서도 언급하고 있다.
해당 글에서는 프로그래머들에 가지고 있는 흔한 가정들이 잘못되었음을 꼬집고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/"&gt;Falsehoods Programmers Believe About Names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자, 이제 거의 마지막까지 왔다. 위 글은 존 그레이엄-커밍의 블로그 글을 링크하고 있다.
대부 존 그레이엄-커밍이 웹 서비스에 가입하다 자신이 이름에 잘못된 문자(invalid characters)가 있다는 메세지에 분노하여 남긴 글이다.
이름에 하이픈(-)이 포함되어 있어서 여러 사이트에서 문제를 겪어왔던 것 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jgc.org/2010/06/your-last-name-contains-invalid.html"&gt;Your last name contains invalid characters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;덧1) 어느 나라나 악플러는 있기 마련인 것 같다. 존 그레이엄-커밍의 블로그 포스팅에도 아래와 같은 사려깊지 못한 댓글이 달려있다. 흠.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Change your name. Not that big of a deal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;덧2) 이메일 필드는 여전히 75자일까? 그렇지 않다. 사용자 이름 필드가 늘어나기 1년 전에 이미 254자로 늘어나 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/pull/2867"&gt;Fixed #20631 -- Increased the default EmailField max_length to 254.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.djangoproject.com/ticket/20631"&gt;https://code.djangoproject.com/ticket/20631&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address"&gt;What is the maximum length of a valid email address?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc5321#section-4.5.3"&gt;RFC5321 #4.5.3.1, Size Limits and Minimums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;덧3) MySQL의 InnoDB 엔진에서 문자열에 대한 인덱스는 767바이트로 제한되어 있고,
1글자에 4바이트를 사용하는 &lt;code&gt;utf8mb4&lt;/code&gt; 인코딩에서는 767 ÷ 4 ≈ 191 이기 때문에 191자로 제한된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-conversion.html"&gt;https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-conversion.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>The Curse of Understanding</title><link href="//lqez.github.io/blog/the-curse-of-understanding.html" rel="alternate"></link><published>2017-11-13T00:00:00+09:00</published><updated>2017-11-13T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-11-13:/blog/the-curse-of-understanding.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;The curse of the monad is that once you get the epiphany, once you understand, 
you lose the ability to explain it to anybody else.&lt;/p&gt;
&lt;p&gt;Douglas Crockford - &lt;a href="https://www.youtube.com/watch?v=dkZFtimgAcM"&gt;‘Monads &amp;amp; Gonads’ at YUIConf 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)"&gt;모나드&lt;/a&gt;는 함수형 프로그래밍 언어에 대해서 얘기할 때 거의 매번 언급되는 주제이다.
모나드라는 개념이 절차형 프로그래밍 언어에 익숙한 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;The curse of the monad is that once you get the epiphany, once you understand, 
you lose the ability to explain it to anybody else.&lt;/p&gt;
&lt;p&gt;Douglas Crockford - &lt;a href="https://www.youtube.com/watch?v=dkZFtimgAcM"&gt;‘Monads &amp;amp; Gonads’ at YUIConf 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)"&gt;모나드&lt;/a&gt;는 함수형 프로그래밍 언어에 대해서 얘기할 때 거의 매번 언급되는 주제이다.
모나드라는 개념이 절차형 프로그래밍 언어에 익숙한 사람들에게는 익숙한 개념이 아니기 때문에, 
&lt;a href="https://e.xtendo.org/haskell/ko/monad_fear/slide"&gt;모나드 괴담&lt;/a&gt; 같은 글이 쓰여질 정도다. (해당 문서는 매우 훌륭하다!)&lt;/p&gt;
&lt;p&gt;어떤 개념을 비로소 깨닫는 순간을 &lt;a href="https://www.merriam-webster.com/dictionary/aha%20moment"&gt;‘Aha moment’&lt;/a&gt;라 부르기도 하는데,
더글라스 크록포드의 말을 인용하자면, 모나드를 이해하는 Aha moment를 겪는 순간,
다른 사람에게 모나드를 설명할 수 없게 되는 &lt;a href="https://stackoverflow.com/questions/19544794/what-is-crockfords-law"&gt;저주&lt;/a&gt;에 걸린다고 한다.&lt;/p&gt;
&lt;p&gt;그런데, 모나드만 그러한가? 세상의 많은 이해와 문제들이 비슷한 상황에 놓여 있다.
간략화한 적당한 비유를 통해 설명하는게 처음 접하는 사람들에게 쉽게 느껴지겠지만, 대부분의 경우는 결국 불필요한 오해를 가져온다.
&lt;em&gt;프로그래밍이란 무엇인가요?&lt;/em&gt; &lt;em&gt;캐시(cache)는 쓰면 좋은가요?&lt;/em&gt; 정확하게 이해하려면 많은 정보와 이해를 필요로 하지만 과연 어디서부터 얼만큼 설명할 것인가?
한 개인이 이해한 것을 다른 사람에게 설명하는 일은 매우 어렵다. 이해와 사전 지식이 다르기 때문에 자신이 어떤 문제에 대해 깨달은 길을 그대로 다른 사람에게 걷게 해도, 그 사람은 깨닫거나 이해하지 못할 수 있다.&lt;/p&gt;
&lt;p&gt;도리어 경험과 노력이 부족하여 충분히 이해하지 못하거나 깨닫지 못한 ‘가짜 전문가’가 더 많이 얘기하고 설명하는 경우도 보게 된다.
이런 사람은 틀린 정보를 거부감 없이 받아들이고, 해석하려고 하지 않으며, 흘려 들은 정보를 마음대로 가공하여 다른 사람에게 조언하거나 추천하기도 한다.
상대적으로 많은 것을 제대로 알고 있는 사람은 다음의 문제를 겪기도 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문제에 대해 설명하는 경우&lt;ul&gt;
&lt;li&gt;많은 사람을 위해 온전히 설명하면 충분히 쉽게 말하지 못해 ‘잘 모르는 사람’ 취급을 받는다.&lt;/li&gt;
&lt;li&gt;자세한 것을 건너뛰고 핵심만 말하면 엉뚱한 얘기를 하는 ‘잘 모르는 사람’이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;설명하지 않고 침묵하는 경우&lt;ul&gt;
&lt;li&gt;마찬가지로 ‘잘 모르는 사람’ 취급을 받는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나는 이런 문제들을 일반화하여 &lt;strong&gt;이해의 저주(The Curse of Understanding)&lt;/strong&gt;라고 부르고 싶다.&lt;/p&gt;
&lt;p&gt;덧) 이 생각을 &lt;a href="https://twitter.com/lqez/status/759061524820299776"&gt;트윗&lt;/a&gt;으로 썼더니, &lt;a href="https://twitter.com/tebica"&gt;@tebica&lt;/a&gt; 님이 이에 공감하여 블로그 &lt;a href="http://earlybird.kr/1938"&gt;포스팅&lt;/a&gt;을 남겼던 적이 있다. 
그리고, 나는 아직 모나드를 이해하지 못했다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Meaningless commits</title><link href="//lqez.github.io/blog/meaningless-commits.html" rel="alternate"></link><published>2017-10-31T00:00:00+09:00</published><updated>2017-10-31T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-10-31:/blog/meaningless-commits.html</id><summary type="html">&lt;p&gt;하고 있는 일에 지나치게 몰입하여 주변을 살피지 못하게 되면, 보다 의미있는 결과를 내기가 어렵다.
요즘 아무도 사용할 것 같지 않은 기능들을 만드는데 시간을 낭비하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;마크다운 목록 정렬하기&lt;/li&gt;
&lt;li&gt;한글 처리를 위한 Django template filter/tag 만들기&lt;/li&gt;
&lt;li&gt;위지윅 에디터 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;mdls - Markdown List Sorter&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/lqez/mdls"&gt;https://github.com/lqez/mdls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;먼저, &lt;a href="https://daringfireball.net/projects/markdown/"&gt;마크다운 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;하고 있는 일에 지나치게 몰입하여 주변을 살피지 못하게 되면, 보다 의미있는 결과를 내기가 어렵다.
요즘 아무도 사용할 것 같지 않은 기능들을 만드는데 시간을 낭비하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;마크다운 목록 정렬하기&lt;/li&gt;
&lt;li&gt;한글 처리를 위한 Django template filter/tag 만들기&lt;/li&gt;
&lt;li&gt;위지윅 에디터 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;mdls - Markdown List Sorter&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/lqez/mdls"&gt;https://github.com/lqez/mdls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;먼저, &lt;a href="https://daringfireball.net/projects/markdown/"&gt;마크다운&lt;/a&gt;은 애초에 표현과 내용의 분리를 중요하게 생각하고, 글을 – 비교적 – 체계적으로 쓰기를 원하는 사람들이 선호하는 글의 형식인데,
이런 유형의 글에 포함되어 있는 목록을 정렬하는 프로그램을 만들겠다는 것 자체가 별 의미가 없다.
마크다운의 목록은 대체로 글쓴이의 의도대로 정렬되어 있을 가능성이 높기 때문이다. ordered list 뿐만 아니라 unordered list 의 경우도 마찬가지다.&lt;/p&gt;
&lt;p&gt;이 기능을 만든 유일한 이유는 관리하고 있던 &lt;a href="https://github.com/summernote/awesome-summernote/"&gt;awesome-summernote&lt;/a&gt;의 플러그인 목록 때문이다.
각 분류에 속해있는 목록을 이제까지는 추가된 순서대로 보관해왔는데, 어떤 기여자가 자신이 추가한 플러그인을 &lt;a href="https://github.com/summernote/awesome-summernote/pull/43/files"&gt;가장 아래가 아닌 곳에 추가&lt;/a&gt;하면서 고민이 시작되었다.
만약 기계적으로 목록을 정렬할 수 있다면, 해당 pull request가 유효한지 검증할 수도 있고, 그렇지 않은 경우 자동으로 정렬하는 것도 가능하기 때문이다.&lt;/p&gt;
&lt;p&gt;하지만, 이는 많은 목록을 관리하기에 애초에 적합하지 않은 마크다운 형식을 쓰는 것 자체가 문제인데, 이를 잘못된 방법으로 해결하려는 것에 가깝게 느껴진다.
그래도 일단 시작했으니 해당 프로젝트의 빌드 과정에 적용할 때까지는 해보려고 한다.&lt;/p&gt;
&lt;h2&gt;django-tossi&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/lqez/django-tossi"&gt;https://github.com/lqez/django-tossi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonhosted.org/korean/"&gt;Korean&lt;/a&gt;은 한글의 형태소를 다루는 라이브러리였다.
과거형으로 적는 이유는 저작자가 이 프로젝트를 deprecate 시키고 &lt;a href="https://github.com/what-studio/tossi"&gt;Tossi&lt;/a&gt;라는 새로운 라이브러리를 만들고 있기 때문이다.
예전에 Korean 라이브러리를 사용하여 Django template 상에서 적절한 조사를 선택하여 출력하는 것을 도와주는 django-template-korean 확장을 만들었는데,
아예 &lt;a href="https://github.com/sublee/korean/pull/3"&gt;Korean 모듈 내부로 내장&lt;/a&gt;하면서 해당 프로젝트도 중단했었다.&lt;/p&gt;
&lt;p&gt;하지만 Korean 라이브러리는 개발이 중지되었으므로 Tossi를 이용해서 django-template-korean을 django-tossi로 다시 살려보려고 한다.
헌데, Korean 라이브러리에 있던 &lt;a href="http://pythonhosted.org/korean/#proofreading-legacy-text"&gt;proofreading&lt;/a&gt; 기능이 Tossi에서는 사라졌다.
이 기능을 django-tossi 내에 구현을 할까 아니면 Tossi 쪽에 추가하는 PR을 보낼까 고민을 했는데, 이 기능을 만들기 전에 과연 이 기능을 얼마나 자주, 중요하게 쓰고 있었는지 생각해볼 필요가 있다는 생각이 들었다.
원래 있었던 것이 없어졌다고 해서 그냥 만드는 것이 아니라, 왜 없어졌을까, 그동안 이 기능을 유용하게 썼는가 한 번 따져봐야겠다.&lt;/p&gt;
&lt;h2&gt;summernote&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/summernote/summernote"&gt;https://github.com/summernote/summernote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2013년부터 참여해오고 있는 프로젝트. 요즘에 누가 위지윅 에디터를 만드냐 싶을 정도로 예전보다는 관심이 많이 줄어든 것이 사실이다.
대부분 의식하지 못하고 있어서 그렇지 &lt;a href="https://github.com/facebook/draft-js"&gt;페이스북의 글쓰기 창도 위지윅&lt;/a&gt;이다.
이 프로젝트에 시간을 쏟는 것이 어떤 긍정적인 변화를 가져올지 아직 잘 모르겠지만, 한번 시작한 일은 책임지자는 마음으로 계속 조금씩 기여하고 있다.&lt;/p&gt;
&lt;p&gt;하지만, 최근에는 예전만큼 기여하지 못하고 있기도 하고, 다른 기여자들도 실무가 바뀌가 시간이 없어져 프로젝트 관리가 제대로 되고 있지 못하다.
어떤 기여자는 프로젝트 작성자와 기존 기여자들이 제대로 활동하지 않는 것에 걱정과 &lt;a href="https://github.com/summernote/summernote/issues/2526"&gt;불만을 가지고 있다&lt;/a&gt;.
계속 꾸준히 하는 것 외에 어떻게 잘 할 수 있을지 고민이 필요하다.&lt;/p&gt;
&lt;p&gt;그냥 오늘 손댔던 일들을 적어본 글.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Data and Logic</title><link href="//lqez.github.io/blog/data-and-logic.html" rel="alternate"></link><published>2017-10-19T00:00:00+09:00</published><updated>2017-10-19T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-10-19:/blog/data-and-logic.html</id><summary type="html">&lt;p&gt;구글 브레인 프로젝트를 이끌고 있는 &lt;a href="https://research.google.com/pubs/jeff.html"&gt;제프 딘&lt;/a&gt;이 얼마 전에 &lt;a href="https://k2i.rice.edu/events/ken-kennedy-institute-lecture-series-jeff-dean-google-senior-fellow"&gt;발표&lt;/a&gt;한 바에 따르면
구글의 기존 언어 번역 코드는 50만줄 가량이었는데, 텐서플로우로 작성된 대규모 머신 러닝 모델에 기반한 번역 코드는 500줄 수준으로 줄어들었다고 한다.&lt;/p&gt;
&lt;p&gt;참고: &lt;a href="https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/"&gt;Google shrinks language translation code from 500,000 to 500 lines&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;FM Nostalgia&lt;/h3&gt;
&lt;p&gt;머신 러닝에 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;구글 브레인 프로젝트를 이끌고 있는 &lt;a href="https://research.google.com/pubs/jeff.html"&gt;제프 딘&lt;/a&gt;이 얼마 전에 &lt;a href="https://k2i.rice.edu/events/ken-kennedy-institute-lecture-series-jeff-dean-google-senior-fellow"&gt;발표&lt;/a&gt;한 바에 따르면
구글의 기존 언어 번역 코드는 50만줄 가량이었는데, 텐서플로우로 작성된 대규모 머신 러닝 모델에 기반한 번역 코드는 500줄 수준으로 줄어들었다고 한다.&lt;/p&gt;
&lt;p&gt;참고: &lt;a href="https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/"&gt;Google shrinks language translation code from 500,000 to 500 lines&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;FM Nostalgia&lt;/h3&gt;
&lt;p&gt;머신 러닝에 기반한 여러 프로젝트를 보면서 계속 묘한 기분이 들었는데, 문득 20년 전의 기억이 떠올랐다.
바로 &lt;a href="https://en.wikipedia.org/wiki/Frequency_modulation_synthesis"&gt;FM 음향&lt;/a&gt;에 기반한 미디 음악에서 &lt;a href="https://en.wikipedia.org/wiki/Pulse-code_modulation"&gt;PCM&lt;/a&gt; 기반의 &lt;a href="https://en.wikipedia.org/wiki/Music_tracker"&gt;트래커&lt;/a&gt; 음악들로 넘어갈 때,
그리고 완전한 PCM 기반의 음원 저장 – &lt;a href="https://en.wikipedia.org/wiki/WAV"&gt;WAV&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/MP3"&gt;MP3&lt;/a&gt;와 &lt;a href="https://en.wikipedia.org/wiki/RealAudio"&gt;RA&lt;/a&gt; 등 – 의 유행과 이들 음원의 유통이 본격화 되던 때에 뭔가 설명할 수 없는 아쉬움과 답답함을 느꼈었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Visual Composer by AdLib from vgmpf" src="./images/2017-10/adlib_visual_composer.png"&gt;&lt;/p&gt;
&lt;p&gt;내가 스스로 듣고자 해서 들었던 첫 음악들은 라디오나 비닐, 테이프가 아닌 컴퓨터 음악이었다.
대표적 FM 음향칩인 &lt;a href="https://en.wikipedia.org/wiki/Yamaha_YM3812"&gt;야마하 YM3812&lt;/a&gt;에 기반한 &lt;a href="http://www.vgmpf.com/Wiki/index.php/Ad_Lib"&gt;Ad Lib&lt;/a&gt;사의 &lt;a href="http://www.vgmpf.com/Wiki/index.php/AdLib"&gt;AdLib&lt;/a&gt; 카드를 힘들게 구해, PC 본체 뒤로 손을 뻗어 볼륨을 조정하며 처음으로 &lt;a href="http://www.vgmpf.com/Wiki/index.php/ROL"&gt;ROL&lt;/a&gt; 음악을 들었다.
이 방식으로 게임 음악을 만들며 즐거운 시기를 보냈었다. 몇 년이 지나 고등학생이 되던 즈음에 트래커 음악을 알게 되고, FM 음원이 아닌 샘플링된 PCM 음원으로 곡을 만든다는 것이 이상했지만 이내 적응하여 이 방식으로도 음악을 만들었다.&lt;/p&gt;
&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/59754377&amp;amp;color=%23ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;&lt;/iframe&gt;

&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/59754224&amp;amp;color=%23ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;&lt;/iframe&gt;

&lt;p&gt;어렸던 나는 수 KiB에 불과한 ROL, MID 나아가 트래커로 만들어진 음악이 낮은 비트레이트를 가진 WAV / MP3 파일에 비해 훨씬 듣기 좋은 음악을 제공하는데, 왜 PCM 으로 곡을 저장해서 유통해야 하는지 이해하지 못했었다.
특정 음을 흉내내기 위한 일종의 ‘악기’ 정보인 &lt;a href="http://www.vgmpf.com/Wiki/index.php/BNK"&gt;BNK&lt;/a&gt; 파일이 있기 때문에 아주 적은 용량의 ROL 파일만으로도 괜찮은 소리를 만들어낼 수 있었던 것을,
BNK 파일이 가지고 있던 작은 정보로 그럴싸한 음을 낼 수 있었던 것이 OPL(FM Operator Type-L) 하드웨어 칩이 있기 때문이라는 것을 당시에는 알지 못했다.
하드웨어였던 OPL을 소프트웨어로 에뮬레이션 하기 위해서는 (당시 기준으로는) 상당한 컴퓨팅 파워가 필요했을 것이다.&lt;/p&gt;
&lt;p&gt;참고: &lt;a href="https://github.com/gtaylormb/opl3_fpga"&gt;Reverse engineered SystemVerilog RTL version of the Yamaha OPL3 (YMF262) FM Synthesizer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;적은 용량의 음악 파일이라는 것은 하드웨어 음원 칩, BNK 파일, 그리고 먼 훗날 거대한 용량을 자랑하는 &lt;a href="https://en.wikipedia.org/wiki/Virtual_Studio_Technology"&gt;VST&lt;/a&gt; 등의 도움으로 가능했던 것이다.&lt;/p&gt;
&lt;h3&gt;Data consumes logic&lt;/h3&gt;
&lt;p&gt;방대한 양의 저장소(메모리나 하드디스크, SSD와 같은)와 빠른 프로세싱 능력은 복잡하고 절차적인 알고리즘, 로직을 줄이는 것을 가능하게 한다.
구구단을 루프로 출력하는 코드와 구구단을 데이터로 가지고 있어 그대로 출력하는 코드는 어떻게 다른가? 50만줄에 해당하는 코드의 총 용량과 500줄의 코드가 작동하는데 필요한 저장소의 크기는 얼마나 차이나는가?
일반적이지 않겠지만, 50만줄이 모두 80글자로 채워져 있다고 가정해도 그 소스 코드의 전체 용량은 약 38MiB 에 불과하다. (해당 소스코드는 &lt;a href="https://ko.wikipedia.org/wiki/UTF-8"&gt;UTF-8&lt;/a&gt;으로 작성되었겠지?)&lt;/p&gt;
&lt;p&gt;기계 학습이 가능해지는 것은 소프트웨어 만의 문제가 아니다. 코드가 동작하는 컴퓨팅 환경의 전반적인 발전이 없다면 과연 개인 컴퓨터에서 &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; 예제들을 구동하며 익힐 수 있었을까.&lt;/p&gt;
&lt;p&gt;위 &lt;a href="https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/"&gt;참조&lt;/a&gt; 글에서도 다음과 같이 분명히 언급하고 있다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Though bear in mind, Google has literally billions of lines of code in its supporting infrastructure, which the new slimmed-down system likely relies upon. No free lunch!&lt;/p&gt;
&lt;/blockquote&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>PyCon Korea 2017 ended.</title><link href="//lqez.github.io/blog/pycon-korea-2017-ended.html" rel="alternate"></link><published>2017-08-16T00:00:00+09:00</published><updated>2017-08-16T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-08-16:/blog/pycon-korea-2017-ended.html</id><summary type="html">&lt;p&gt;&lt;img alt="pyconkr-2017-ended.jpg" src="./images/2017-08/pyconkr-2017-ended.jpg"&gt;&lt;/p&gt;
&lt;p&gt;준비위원회 분들과 거의 반년을 준비해서 4일간 코엑스 그랜드볼룸에서 진행했던 &lt;a href="https://www.pycon.kr/2017/"&gt;파이콘 한국 2017&lt;/a&gt;이 어제 스프린트 진행을 마지막으로 끝났다.&lt;/p&gt;
&lt;p&gt;많은 사람이 운동을 배울 때 자주 듣는 얘기는 &lt;strong&gt;몸에 힘을 빼라는 것&lt;/strong&gt;이다. 몸에 힘을 빼야 물에 뜰 수 있는 것처럼.
어쩌면 거창한 목표나 불필요한 공명심 없이 시작했기 때문에 지금까지 이런저런 일이 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="pyconkr-2017-ended.jpg" src="./images/2017-08/pyconkr-2017-ended.jpg"&gt;&lt;/p&gt;
&lt;p&gt;준비위원회 분들과 거의 반년을 준비해서 4일간 코엑스 그랜드볼룸에서 진행했던 &lt;a href="https://www.pycon.kr/2017/"&gt;파이콘 한국 2017&lt;/a&gt;이 어제 스프린트 진행을 마지막으로 끝났다.&lt;/p&gt;
&lt;p&gt;많은 사람이 운동을 배울 때 자주 듣는 얘기는 &lt;strong&gt;몸에 힘을 빼라는 것&lt;/strong&gt;이다. 몸에 힘을 빼야 물에 뜰 수 있는 것처럼.
어쩌면 거창한 목표나 불필요한 공명심 없이 시작했기 때문에 지금까지 이런저런 일이 많았음에도, 큰 탈 없이 해올 수 있었던 것 아닐까.&lt;/p&gt;
&lt;p&gt;하지만, &lt;a href="https://www.slideshare.net/lqez/2017-back-to-the-basic-78779365"&gt;키노트 발표&lt;/a&gt;에서 얘기했던 것 처럼 처음보다는 분명 행사 운영에 대한 책임감과 부담감이 생겼고, 그로 인해 행사의 본질에 더 충실할 수 있는 부분도, 없는 부분도 있었다.
새롭게 시도하는 것들은 우리가 생각했던 대로 잘 되진 않았고, 고쳐야 했다고 생각했던 부분은 제대로 고쳐지지 않아 같은 문제를 다시 만나기도 했다.&lt;/p&gt;
&lt;p&gt;이번 행사를 마무리하며 돌이켜보니, 결국 준비하는 사람이 얼마나, 어떻게 준비하냐 보다는 어떤 사람이 참가하느냐가 그 행사를 결정한다고 생각한다.
준비하는 사람은 어떻게 잘할까 보다는 다양한 사람과 주제가 오고 가는 장소에서 사고 없이 &lt;strong&gt;작지만 옳은&lt;/strong&gt; 진전을 만들어 내느냐에 집중하는 것이 좋다고 본다.&lt;/p&gt;
&lt;p&gt;작년에는 &lt;a href="https://www.slideshare.net/lqez/tox-travis-coveralls"&gt;CI에 대한 발표&lt;/a&gt; 이후에 &lt;a href="https://www.pycon.kr/2016apac/program/tutorial/1"&gt;튜토리얼&lt;/a&gt;까지 이어서 하는 것에 노력했다면,
올해는 &lt;a href="https://www.pycon.kr/2017/program/sprint/3"&gt;스프린트&lt;/a&gt;를 진행하면서 오픈소스를 처음 접해보는 분들에게 기여하는 방법을 알려드리고, 긍정적인 경험을 나누고 싶었다.
운이 좋았는지, 썸머노트를 작성한 홍영택(&lt;a href="https://twitter.com/hackerwins"&gt;@hackerwins&lt;/a&gt;)님도 마침 시간이 맞아 &lt;a href="https://github.com/summernote/django-summernote"&gt;django-summernote&lt;/a&gt; 뿐 아니라 &lt;a href="https://github.com/summernote/summernote"&gt;summernote&lt;/a&gt; 에 대한 스프린트를 같이 진행할 수 있었다.&lt;/p&gt;
&lt;p&gt;큰 문제를 해결하기 보다는, 스프린트에 참가한 분들에게 각자 하나의 커밋이라도 머지되는 경험을 드리고 싶었는데, 다행히 기존 프로젝트에 많은 문제가 있어(?) 대부분 처음 스프린트를 경험했음에도 불구, 소기의 성과를 거둘 수 있었다.
이번 한 번의 스프린트로 대단한 일을 하려는게 아니다. 적게는 한 두명이라도 스프린트를 통해 새롭지만 긍정적인 경험을 하고, 다시 주변 사람들에게 새로운 시각에 대해 전파할 수 있다고 가정한다면, 이 일을 몇 년간 꾸준히 계속할 때 작지만 의미있는 변화를 가져올 수 있다고 믿는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/summernote/django-summernote/pulls?q=is%3Apr+is%3Aclosed+label%3Apyconkr2017"&gt;django-summernote에서 현재까지 머지된 4개의 PR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/summernote/summernote/pull/2409"&gt;summernote의 오래된 이슈를 스프린트 참가자가 해결&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/summernote/summernote/pull/2413"&gt;많은 문제를 직접 해결하고 스프린트 기간에 summernote의 새 버전을 릴리즈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;무엇보다 올해는 준비위원회에 새로 들어오시거나, 새롭게 더 많은 책임을 진 사람들이 주도적으로 준비하면서 이전보다 더 나은 결과를 내는 것을 볼 수 있어 좋았다.
마지막으로, 비영리 컨퍼런스를 다른 자원봉사자들과 함께 운영하면서 배웠던 가장 큰 부분이 같이 준비했던 예지님이 보낸 이메일에 적혀있어, 동의를 구하고 이 곳에 인용해본다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/bloodevil4"&gt;@bloodevil4&lt;/a&gt;
어떤 일을 할 때 최선을 다할 수도, 조금 신경을 덜 쓸 수도 있습니다.
하지만, 그 일을 했던 사람이 가장 하고 싶은 대로 하는 것이 최선이라고 저는 생각합니다.
물어볼 수도 있고, 그 물어보는 것에 대해서 다른 의견을 낼 수도, 그렇게 하지 말라고 할 수는 있습니다.
그러나, 그 사람이 다르게 처리했다고 해서 우리는 비난할 수 없습니다.
모든 자리에서 무슨 일을 하든지 우리는 그것을 지지하고 응원해주어야, 다음에 일하는 사람들이 더 열심히, 잘할 수 있다고 생각합니다.&lt;/p&gt;
&lt;/blockquote&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Processing of photos</title><link href="//lqez.github.io/blog/processing-of-photos.html" rel="alternate"></link><published>2017-08-01T00:00:00+09:00</published><updated>2017-08-01T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-08-01:/blog/processing-of-photos.html</id><summary type="html">&lt;p&gt;어제 어떤 분이 페이스북에서 &lt;a href="http://www.screw-bar.com/"&gt;구닥&lt;/a&gt;으로 찍은 사진을 ‘무보정 원본’ 이라는 글과 함께 올려놓은 것을 보았다.
구닥이 만든 결과물을 그 이후에 별도의 보정 없이 올렸으니까 그런 표현을 쓰셨다고 생각한다.
이미 구닥이 엄청난 보정을 한 사진인데, 그것을 ‘무보정’이라고 표현하는게 조금 이상하다고 생각했지만,
동시에 과연 어느 정도의 사진을 무보정이라고 할 수 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;어제 어떤 분이 페이스북에서 &lt;a href="http://www.screw-bar.com/"&gt;구닥&lt;/a&gt;으로 찍은 사진을 ‘무보정 원본’ 이라는 글과 함께 올려놓은 것을 보았다.
구닥이 만든 결과물을 그 이후에 별도의 보정 없이 올렸으니까 그런 표현을 쓰셨다고 생각한다.
이미 구닥이 엄청난 보정을 한 사진인데, 그것을 ‘무보정’이라고 표현하는게 조금 이상하다고 생각했지만,
동시에 과연 어느 정도의 사진을 무보정이라고 할 수 있는가? 에 대한 의문도 동시에 들었다.&lt;/p&gt;
&lt;p&gt;예전에는 무보정 원본이 훌륭해야 사진을 잘 찍는 것이라는 인식이 있었던 것 같다.
필름을 이용해 사진을 찍고, 현상한 필름을 필름 스캐너로 스캔해서 &lt;a href="https://en.wikipedia.org/wiki/Raw_image_format"&gt;RAW&lt;/a&gt; 기준으로 보았을 때 훌륭한 것, 그래야 뭔가 더 대단한 느낌이 들었던 때가 있었다.
이런 사진은 정말 ‘무보정 원본’인가? 이미 &lt;a href="https://en.wikipedia.org/wiki/Velvia"&gt;벨비아&lt;/a&gt;를 선택했던 그 순간, 인스타그램의 필터를 고른 것과 어떤 차이가 있는 것일까.
디지털 카메라에서도 이미지 센서로 들어온 빛이 &lt;a href="https://en.wikipedia.org/wiki/Image_processor"&gt;이미지 프로세서&lt;/a&gt;에서 DAC/DSP 과정을 통해 비트로 변환될 때 이미 ‘보정’이 되는 것 아닐까.&lt;/p&gt;
&lt;p&gt;우리가 무보정이라고 하는 것의 기준은 과연 무엇일까.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>Death Valley</title><link href="//lqez.github.io/blog/death-valley.html" rel="alternate"></link><published>2017-05-09T00:00:00+09:00</published><updated>2017-05-09T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2017-05-09:/blog/death-valley.html</id><summary type="html">&lt;p&gt;어떤 종류의 일들은 왜 하는지, 또는 왜 그렇게 하는지 간단히 설명하기가 어려울 때가 있다.
내가 개인적으로 하는 일 중에도 그런 것들이 있고, 회사에서의 여러 일도 그러하고, 어떤 정치적인 선택도 그러한 경우가 많다.&lt;/p&gt;
&lt;p&gt;궁극적으로 하고자 하는 일 또는 목표를 A 라고 할 때, A 를 바로 할 수 없으니 B 를 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;어떤 종류의 일들은 왜 하는지, 또는 왜 그렇게 하는지 간단히 설명하기가 어려울 때가 있다.
내가 개인적으로 하는 일 중에도 그런 것들이 있고, 회사에서의 여러 일도 그러하고, 어떤 정치적인 선택도 그러한 경우가 많다.&lt;/p&gt;
&lt;p&gt;궁극적으로 하고자 하는 일 또는 목표를 A 라고 할 때, A 를 바로 할 수 없으니 B 를 먼저 해야하고, B 를 하려다보니 C 를 먼저 하지 않을 수 없는데,
A 와 C 사이에는 어떤 직접적인 관련이 없는 경우에 참 설명하기가 어렵다.&lt;/p&gt;
&lt;p&gt;이 때, A 부터 C 까지 모두 알고 이해하는 사람에게는 이 일을 설명하기가 용이한 반면, 그렇지 않은 경우에는 그 연결 고리를 설명하기가 참 난감하다.&lt;/p&gt;
&lt;p&gt;데스 밸리(Death Valley)는 스타트업 업계에서 창업 이후 손익 분기점을 통과하기까지, 또는 대규모의 투자 유치로 현금 흐름이 원활해지기 전까지를
일컫는 말인데, 위와 같이 목표에 도달하기 전까지의 온갖 사전 작업들을 처리하는 단계도 데스 밸리라고 부르고 싶다.
납득될 정도로 설명하기는 너무 어려운데, 해야만 하는 일들은 한 가득이다. 그렇다고 계속 설명하고만 있을 수도 없고,
어떤 종류의 일들은 각자의 역할이나 입장에 따라서 받아들여지기 힘든 경우도 많다.&lt;/p&gt;
&lt;p&gt;그래서 A - B - C 가 A - B - C - ... - Y - Z 가 되지 않도록 적절히 짧은 목표를 설정하는 것이 필요한데,
이 또한 일의 종류에 따라서 각 단계의 격차가 너무 벌어질 수 밖에 없거나, 길고 긴 단계를 가질 수 밖에 없기도 하다.&lt;/p&gt;
&lt;p&gt;시간과 노력을 들여 계속 설명하고, 조금 더 합의하는 과정을 거치려고 하지만 어쩐지 이런 노력은 다 무용하고
결국 중요한 것은 좋은 선택을 하는 것일 뿐 아닌가 하는 생각도 든다.&lt;/p&gt;
&lt;p&gt;잘 모르겠다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry><entry><title>A Postmortem of The Platance Hackathon</title><link href="//lqez.github.io/blog/a-postmortem-of-the-platance-hackathon.html" rel="alternate"></link><published>2016-09-12T00:00:00+09:00</published><updated>2016-09-12T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2016-09-12:/blog/a-postmortem-of-the-platance-hackathon.html</id><summary type="html">&lt;p&gt;외부로 알려진 행사의 개요는 이렇다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘플레이탕스 해커톤’ 개최: &lt;a href="http://www.bloter.net/archives/262994"&gt;http://www.bloter.net/archives/262994&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;시간이 지나, 돌이켜 봤을 때 성공한 많은 일들은 거창한 계획에서 시작하는 것이 아니라, 작은 아이디어나 작은 시도에서 시작한다고 생각한다.
그래서 작은 일들에 늘 관심을 가지고, 남들과 다른 생각이나 행동을 하는 사람들에게 큰 가치를 느끼고 무언가 같이 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;외부로 알려진 행사의 개요는 이렇다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘플레이탕스 해커톤’ 개최: &lt;a href="http://www.bloter.net/archives/262994"&gt;http://www.bloter.net/archives/262994&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;시간이 지나, 돌이켜 봤을 때 성공한 많은 일들은 거창한 계획에서 시작하는 것이 아니라, 작은 아이디어나 작은 시도에서 시작한다고 생각한다.
그래서 작은 일들에 늘 관심을 가지고, 남들과 다른 생각이나 행동을 하는 사람들에게 큰 가치를 느끼고 무언가 같이 해보고 싶은 마음을 늘 가지고 있다.&lt;/p&gt;
&lt;p&gt;이번에 &lt;a href="https://www.smartstudy.co.kr/"&gt;스마트스터디&lt;/a&gt;와 &lt;a href="https://www.plating.co.kr/"&gt;플레이팅&lt;/a&gt;이 주최한 플레이탕스 해커톤도 큰 목표를 두고 시작한 것은 아니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-00.jpg" src="./images/2016-09/platance-00.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;起.&lt;/h1&gt;
&lt;p&gt;회사에서 저녁으로 다양한 배달 음식들을 시켜먹는데, 페이스북에서 우연히 플레이팅이라는 저녁 배달 서비스를 이용하는 사람들의 사진을 보았다.
이때까지만 해도, 플레이팅이 자기 레스토랑을 가지고 있는 전문 셰프의 요리를 대신 배달해주는 서비스라고 생각했다. 업계에 이미 많이 존재하는 다른 배달 서비스와 같이.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플레이팅 홈페이지: &lt;a href="https://www.plating.co.kr/"&gt;https://www.plating.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서비스를 좀 살펴보니 다른 음식점의 음식을 배달하는 것이 아니라, 몇몇 음식의 소개가 되어 있고, 어떤 셰프가 만들었는지, 그리고 그 셰프가 어떤 경력을 가지고 있는지 소개하고 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-01.jpg" src="./images/2016-09/platance-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;플레이팅은 음식 배달 서비스만 하는 회사가 아니다. 오히려 테이블이 없이 배달만 하는, 배달을 위한 자체적인 서비스가 갖춰진 일반적인 음식점에 가깝고 볼 수 있다.
일단은 평상시에 배달해 먹던 치킨, 피자나 분식과는 다른 음식들을 시켜 먹을 수 있어 새로웠다.&lt;/p&gt;
&lt;p&gt;아직은 초창기 스타트업이라서 그런지 현재 판매중인 음식들의 종류나 구입 가능 여부를 웹에서 확인할 수 있는 방법이 없었다.
어떤 메뉴가 있는지도 반드시 앱을 설치한 후에야 확인할 수 있어, 구글 시트 등을 통해 각자 먹고 싶은 메뉴를 취합해서 시켜 먹는 우리 회사의 특성상 메뉴 확인이 개별적으로 가능해야 했는데, 이 부분이 아쉬웠다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-02.jpg" src="./images/2016-09/platance-02.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;承.&lt;/h1&gt;
&lt;p&gt;나와 같이 하드웨어 부서에서 일하고 있는 파덕님의 &lt;a href="https://www.nhnnext.org/"&gt;NHN NEXT&lt;/a&gt; 동기인 져니님이 플레이팅의 소프트웨어 엔지니어라는 얘기를 들었다.
파덕님이 플레이팅 메뉴라도 웹 페이지로 보여주면 안되겠냐고 문의를 했는데, API를 줄테니 직접 해보라는 답변을 듣고 리액트로 직접 작성해버렸다(?)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사건의 시작: &lt;a href="https://www.facebook.com/hello.heesu/posts/906485259456004"&gt;파덕님 페이스북 포스팅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;그렇게 만들어진 전용 페이지: &lt;a href="http://smartstudy.plating.co.kr/"&gt;http://smartstudy.plating.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="platance-03.jpg" src="./images/2016-09/platance-03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;그리하여, 스마트스터디 사람들은 플레이팅 메뉴를 손쉽게 열람하게 되어 잘 먹고 잘 살았습니다,
로 끝나진 않았고 개인적으로 집에서 플레이팅 샐러드를 하나 먹고 싶어서 따로 주문하여 회사 주문 품목과 같이 배송 받으려고 했다.&lt;/p&gt;
&lt;p&gt;직접 서비스를 써보니, 앱에서의 카드 등록 과정이나 주문시 별도 요청을 적는 부분 등에서 몇 가지 아쉬운 점이 있어 ‘이렇게 개선해보면 좋을텐데...’ 하는 아쉬움을 파덕님을 통해 전했다.
그러자 져니님이 회사에 개발자가 부족하여 우선순위 낮은 이슈들을 쳐내기 어렵다는 다른 아쉬움으로 답해왔다.&lt;/p&gt;
&lt;p&gt;이 외에도 이런 저런 아쉬운 점을 셋이서 얘기하다가 농담삼아, ‘아니 그럼 주말에 저랑 파덕님이라도 가서 좀 놀면서 개발하면 좋지 않을까요?’ 하고 가볍게 던진 이야기가 해커톤으로 커지고,
몇 명이 모여서 하는게 아니라 이왕 이렇게 된 거 판을 키워서 재미있게 놀아보자고 회사 대 회사로 얘기하게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-04.jpg" src="./images/2016-09/platance-04.jpg"&gt;&lt;/p&gt;
&lt;p&gt;당장 내일 해커톤을 하자는 것을 뜯어 말려, 각자 준비를 해서 일주일 뒤에 하는 것으로 결정했다.
이어, 져니님이 짧은 시간에 재치있는 글을 곁들여 구글 폼으로 해커톤 신청 페이지를 만들었고, 나는 폼을 수정할 수 있는 링크를 전달받아 만들고 있던 헤더 이미지를 얹고 꾸몄다.
이 폼을 페이스북이나 트위터 등을 통해 알렸더니, 너무 많은 사람이 참가해서 플레이팅 사무실에서 진행할 수 없으면 어쩌나 걱정이 될 정도로 많은 분들이 신청해주셨다.&lt;/p&gt;
&lt;p&gt;행사 당일까지 짬짬히 시간을 내서, 져니님은 회사에서 공개 가능한 API 와 웹 서비스들을 정리하며 안내 문서를 작성하였고,
나는 보도자료 준비와 더불어 기념품으로 이번 해커톤의 의미를 담은 기념 머그컵을 사내수공업으로 이십여 개 제작하였다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-05.jpg" src="./images/2016-09/platance-05.jpg"&gt;
&lt;img alt="platance-06.jpg" src="./images/2016-09/platance-06.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;轉.&lt;/h1&gt;
&lt;p&gt;지나치게 열심히, 과하게 준비하려고 하지도 않았고, 또 일부러 대충하려고 하지도 않았던 플레이탕스 해커톤이 시작되었다.
아침 10시부터 저녁 10시까지, 12시간 동안 플레이팅의 논현동 사무실에서 플레이팅의 음식을 점심/저녁으로 시식하며 진행되었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-07.jpg" src="./images/2016-09/platance-07.jpg"&gt;&lt;/p&gt;
&lt;p&gt;다른 해커톤은 주제를 정해주기는 해도, 문제 의식이 명확하지 않은 상태로 팀 빌딩을 하고 시작하게 되어 제대로 진행되지 못하거나 완성도가 낮은 팀들이 속출하는 반면,
이번에는 져니님이 많은 준비를 하여 현재 서비스의 상황과 한계, 문제점들에 대해 기본적인 안내를 잘 해주었을 뿐 아니라,
시식을 위해 주문하는 과정을 직접 체험하고, 주문이 어떻게 배달까지 이어지는지 현장에서 관찰할 수 있어 문제 도출이 잘 되었던 것이 좋았다.&lt;/p&gt;
&lt;p&gt;이 지점에서 누군가는 이게 어째서 해커톤이냐? 되물을 수도 있다. 개발자에게 정당한 비용을 지불하고 문제를 해결해야 하는 업무의 영역인데 어째서 해커톤으로, 열정으로 포장하는가, 라는 비난도 있을 수 있다고 생각한다.
하지만, 나는 서로 협업하지 않았던 사람들이 모여 같은 주제에 대해 토론하고 현장에서 문제를 인식, 도출하여 대안을 제시하고 개발하는 전 과정이 해커톤이라고 생각한다.
우리가 왜 꼭 어딘가에 소속되어 직업적인 프로그래밍만 해야 하는가? 무릇 개발자라면 본인이 불편하거나 본인 기준에 맞지 않는 부분에 대해 직접적으로 개선하려는 시도가 더 나은 개발자가 될 수 있는 시작점이 된다고 본다.&lt;/p&gt;
&lt;p&gt;져니님의 소개 이후에 돌아가며 짧은 자기 소개로 인사를 나눈 뒤에 점심을 먹으며 각자 개선, 해결하고 싶은 주제를 종이에 적고 칠판에 붙여 팀 빌딩을 시작했다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-08.jpg" src="./images/2016-09/platance-08.jpg"&gt;
&lt;img alt="platance-09.jpg" src="./images/2016-09/platance-09.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;結.&lt;/h1&gt;
&lt;p&gt;플레이팅 측에서 테스트용 API 서버 뿐 아니라, 현재 서비스 중인 앱의 소스 코드와 샘플로 사용할 수 있는 실제에 가까운 가공된 데이터 셋을 제공해준 덕분에 다양한 방법으로 각자의 주제를 구현해볼 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-10.jpg" src="./images/2016-09/platance-10.jpg"&gt;&lt;/p&gt;
&lt;p&gt;스무 명 정도의 참가자들은 5개 팀으로 나뉘어, 토론을 하기도 하고 일단 개발을 시작하기도 했다.
맛있는 플레이팅의 식사와 디저트가 제공되어 배고픔 없이 개발할 수 있어 좋았다.
개발을 시작할 때에는 팀별로 이름을 붙이진 않았지만, 정리해보니 다음과 같은 팀들이 구성되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Review&lt;/em&gt;, 사용자 리뷰를 개선.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sort&lt;/em&gt;, 플레이팅 앱에서 식사 메뉴의 정렬 방식을 개선.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;BigBoss&lt;/em&gt;, 관리자용 웹 도구의 전반적인 UX를 개선.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Rider&lt;/em&gt;, 배달을 진행하는 라이더들이 사용하는 앱의 UX를 개선.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;13K&lt;/em&gt;, 주문을 배달하기 위해 배차하는 과정과 동선을 개선.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;리뷰 팀은 커머스 서비스 기획자와 파덕님이 한 조가 되어 서비스에서 리뷰 기능을 개선하는 미션을 수행하였다.
종이로 만든 프로토타입을 시작으로, 주문 단위 리뷰가 아닌, 주문 내 상품별 리뷰가 가능한 형태를 제안하고 &lt;a href="https://facebook.github.io/react/"&gt;리액트&lt;/a&gt;를 이용해 프로토타입을 완성하였다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-11.jpg" src="./images/2016-09/platance-11.jpg"&gt;
&lt;img alt="platance-12.jpg" src="./images/2016-09/platance-12.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Sort&lt;/h2&gt;
&lt;p&gt;플레이팅의 메뉴 정렬이 하나로 고정된 것이 아쉬웠던 소트 팀은 목록 개선을 제안하고 기존 소스 코드를 수정해서 구현하기도 했지만, 현재 안드로이드 앱 구성의 문제점에 대해 더 많이 밝혀내며 시간을 보냈다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-13.jpg" src="./images/2016-09/platance-13.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;BigBoss&lt;/h2&gt;
&lt;p&gt;한 회사에서 같은 팀이 만든 관리자 화면이 서로 다른 구성이라 사용하기 불편할 뿐 아니라, 특정 화면 크기를 가정하고 만들어진 문제점이 있었다.
빅보스 팀은 기존 코드를 처음부터 다시 만들지 않고도 웹 브라우저 상에서 연계하여 조화롭게 사용할 수 있는 방법을 제안하였다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-14.jpg" src="./images/2016-09/platance-14.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Rider&lt;/h2&gt;
&lt;p&gt;라이더 팀은 기존 라이더 앱의 지도가 단순히 배달 지점만 표시하고 있는 점과 주문 목록 표시, 메뉴 확인 및 상태 변경이 불편한 것을 문제로 인식하고,
라이더가 배달시 사용하기 편리하도록 완전히 새로운 앱을 만들었다.
그리고 다른 내비게이션 앱의 외부 호출 로직을 분석하여 라이더 앱에서 바로 내비게이션 앱으로 목적지 입력 처리가 가능하도록 하였다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-15.jpg" src="./images/2016-09/platance-15.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;13K&lt;/h2&gt;
&lt;p&gt;내가 참여했던 13K 팀은 해커톤을 진행하며 개발하는 동안 팀원 네 명이서 13 접시(끼니)를 먹었다는 의미로 13K 라는 팀 이름을 정했다.
기존 주문 배차 시스템이 각각의 주문 번호에 대한 라이더 지정을 담당자가 ‘개인적인 노하우’를 바탕으로 일일히 매번 클릭하여 배차하는 과정이 낭비로 느껴져, 이 부분을 개선하고 배달 경로를 최적화 하는 미션을 정했다.
파이썬 웹 프레임워크인 &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;로 웹 서비스를 구성하였으며, 해당 시간대의 주문 건들을 읽어와 외부 엔진을 통해 클러스터링 하고, 클러스터 내에서의 이동 경로를 최적화 하려고 했다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-16.jpg" src="./images/2016-09/platance-16.jpg"&gt;&lt;/p&gt;
&lt;p&gt;팀원이 네 명이었지만, 나를 제외한 다른 세 명은 고등학생으로 실전 경험이 많지 않은 점을 고려, 클러스터링과 주소 분석, 경로 최적화 등 개별 과제로 구분하여 각자 맡아서 진행하였으며,
나는 웹 서비스를 구축하고 전달받은 덤프 데이터를 데이터베이스로 구축, 외부 프로세스를 호출하여 나온 결과를 다시 웹 서비스로 제공하는 역할을 맡았다.&lt;/p&gt;
&lt;p&gt;각자 사용하는 언어가 달라 클러스터링은 C#, 경로 최적화는 Java, 나머지는 Python인 상황인 것이 재미있었으며, C# 구동을 위해 내 맥북에 &lt;a href="http://www.mono-project.com/docs/about-mono/supported-platforms/osx/"&gt;OS X 용 Mono Compiler&lt;/a&gt;를 처음으로 설치하는 경험도 했다.
해커톤이 재미있는 이유는 평상시에는 경험하기 어려운, 일부러 알려고 하지 않는 것들과 낯선 상황들을 마주하여 극복하는 것이라고 생각하는데, 이번에도 마찬가지였다.&lt;/p&gt;
&lt;p&gt;서로 다른 언어로 만든 결과물을 &lt;code&gt;stdin&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt; 으로 조합하려는 시도도 재미있었고,
늘 ‘이렇게 하면 뻔히 되는 거겠지’ 생각만 했던 &lt;a href="https://developers.google.com/maps/documentation/javascript/"&gt;Google Maps API&lt;/a&gt;도 실제로 적용해볼 때에야 알 수 있는 부분들이 있었으며,
주문 샘플 데이터를 입력/변환 처리하면서 간만에 위치 데이터를 다루는 기회가 되었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-17.jpg" src="./images/2016-09/platance-17.jpg"&gt;&lt;/p&gt;
&lt;p&gt;비록, 프로그램간 인터페이스를 완전히 맞추지 못한데다 마감까지 시간이 부족하여 완전한 조립은 이뤄내지 못했지만, 급한대로 &lt;code&gt;scipy&lt;/code&gt; 패키지의 &lt;code&gt;K-means clustering&lt;/code&gt;을 이용해 배차 서비스의 개선을 제안하는데 까지는 성공하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;13K 팀 소스 코드: &lt;a href="https://github.com/lqez/platance-hackathon"&gt;https://github.com/lqez/platance-hackathon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;K-means clustering : &lt;a href="https://en.wikipedia.org/wiki/K-means_clustering"&gt;https://en.wikipedia.org/wiki/K-means_clustering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;K-means in Scipy: &lt;a href="http://docs.scipy.org/doc/scipy/reference/cluster.vq.html"&gt;http://docs.scipy.org/doc/scipy/reference/cluster.vq.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Closing&lt;/h1&gt;
&lt;p&gt;져니님이 해커톤을 마치고 1등이 아닌 2등 팀에게만 상품을 주겠다고 하였는데, 특별히 기준을 세우고 평가를 하는 자리가 아니라 딱히 등수를 가리기가 어려웠다.
박수 소리로 하자는 고전적인 아이디어가 나와 맥북을 통해 데시벨 측정으로 정량적 평가를 하려고 했으나, 박수 소리가 너무 커서 모두 클리핑이 되는 관계로 포기.
대신, 파이썬 랜덤신을 믿어보기로 했다.&lt;/p&gt;
&lt;p&gt;팀 명을 리스트에 넣고 10회 &lt;a href="https://docs.python.org/3/library/random.html#random.shuffle"&gt;셔플&lt;/a&gt;, 그리고 첫번째 요소가 아닌 두번째 요소를 출력하여 2등을 뽑기로 했다.
결과적으로 BigBoss 팀이 2등으로 선정되어 플레이팅에서 준비한 소정의 상품을 획득하였다. 정작 랜덤신이 뽑은 1등은 내가 참여했던 13K 팀이었는데... 랜덤은 언제나 옳다(?)&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-19.jpg" src="./images/2016-09/platance-19.jpg"&gt;&lt;/p&gt;
&lt;p&gt;플레이탕스 해커톤은 큰 준비 없이 즐겁게 시작해서 즐겁게 끝난, 비교적 성공적인 해커톤이었다고 생각한다.
무엇보다 참가자들 모두가 즐겁게 식사하고, 떠들고, 적당한 성과를 냈고, 자신이 만든 결과물에 대해 다른 사람과 공유할 수 있는 시간을 가질 수 있어 좋았다.&lt;/p&gt;
&lt;p&gt;플레이팅 사무실에 프로젝터가 없다고 하여 사무실에서 간이로 사용하던 프로젝터를 가져왔는데, 덕분에 안드로이드 폰 미러링이나 종이로 프로토타이핑 한 내용들을 같이 보고 얘기할 수 있어 다행이었다.
롤스크린이나 거치대가 없어 책상에 의자를 얹고 사무실 벽에 프로젝션하며 변변치 않게 진행했지만, 이 과정 또한 다들 즐기고 웃으며 같이 하는 분위기로 함께 한다는 느낌이 강하게 들었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-18.jpg" src="./images/2016-09/platance-18.jpg"&gt;&lt;/p&gt;
&lt;p&gt;해커톤 기념품으로 컵을 만들면서 플레이팅의 로고에 들어있는 &lt;code&gt;+&lt;/code&gt; 기호화된 알파벳 &lt;code&gt;T&lt;/code&gt;를 응용해 컵의 앞/뒷면에 더하기와 곱하기를 새겨넣었다.
해커톤을 통해 각자가 가진 재능과 아이디어, 그리고 유머를 더하고 곱해보자는 낡은(...) 발상에 만든 기념품인데 재미있는 추억을 더 오래 기억할 수 있는 계기가 되었으면 좋겠다.&lt;/p&gt;
&lt;p&gt;주말에 시간을 내어 참가해준 모든 참가자분들과 흔쾌히 &lt;strike&gt;도장깨기&lt;/strike&gt; 해커톤을 승락하고 사무실을 내어준 플레이팅 분들에게 모두 감사드린다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="platance-20.jpg" src="./images/2016-09/platance-20.jpg"&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="plating"></category><category term="platance"></category><category term="hackathon"></category></entry><entry><title>Sketch and Draft</title><link href="//lqez.github.io/blog/sketch-and-draft.html" rel="alternate"></link><published>2016-08-31T00:00:00+09:00</published><updated>2016-08-31T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2016-08-31:/blog/sketch-and-draft.html</id><summary type="html">&lt;p&gt;소셜 미디어에 사진을 올리며 스케치와 시안 사이라고 적었다.
&lt;img alt="sketch-and-draft.jpg" src="./images/2016-08/sketch-and-draft.jpg"&gt;&lt;/p&gt;
&lt;p&gt;모 대학교 취업 박람회에서 사용할 홍보물을 제작하기 위해 간단히 스케치한 것과 그 스케치를 바탕으로 만든 시안이었다.&lt;/p&gt;
&lt;p&gt;디지털로 바로 작업하는 것보다 종이에 펜으로 일단 빠르게 그려보는 것이 아이디어 구체화가 더 빠르게 진행되고 시간을 절약할 수 있어 선호한다.
이는 프로그래밍에서도 바로 제품 코드를 작성하는 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;소셜 미디어에 사진을 올리며 스케치와 시안 사이라고 적었다.
&lt;img alt="sketch-and-draft.jpg" src="./images/2016-08/sketch-and-draft.jpg"&gt;&lt;/p&gt;
&lt;p&gt;모 대학교 취업 박람회에서 사용할 홍보물을 제작하기 위해 간단히 스케치한 것과 그 스케치를 바탕으로 만든 시안이었다.&lt;/p&gt;
&lt;p&gt;디지털로 바로 작업하는 것보다 종이에 펜으로 일단 빠르게 그려보는 것이 아이디어 구체화가 더 빠르게 진행되고 시간을 절약할 수 있어 선호한다.
이는 프로그래밍에서도 바로 제품 코드를 작성하는 것보다, 비교적 단순한 코드로 &lt;a href="https://en.wikipedia.org/wiki/POC"&gt;Proof-of-Concept(PoC)&lt;/a&gt;를 달성하고
발전시키거나 교체해가면서 작업하는 것과 같다고 생각한다.&lt;/p&gt;
&lt;p&gt;최근에는 제품 디자인이나 제작과 관련된 업무를 더 수행하면서, 이와 같이 서로 다른 업무 영역에서 비슷한 일들이 있음을 경험하고 있다.
(다른 영역에 대해서 비슷한 논리를 잘못 대입하는 경우가 워낙 많아 조심스럽지만.)&lt;/p&gt;
&lt;p&gt;프로그래밍은 대부분 연속적인 논리적 사고의 결과물이라고 여기는 경우가 많은데,
제품을 만들어가는 과정에서는 논리 뿐 아니라 상상력도 필요하다고 생각한다.
쓰임새를 예상하지 못하고 낮은 수준으로 만드는 것도 문제지만, 더 큰 문제는 &lt;a href="https://en.wikipedia.org/wiki/Overengineering"&gt;과한 설계&lt;/a&gt;가 아닐까.
미래를 걱정하는 설계만 계속하다 제대로 동작하는 서비스를 하나도 만들지 못하는 경우도 경험했었다. 이런 일들을 줄이기 위해서는 내가 지금 스케치하고 있는 내용이 어떤 모습으로 완성되고 사용될 지 상상해보는 일이 필요하지 않을까.&lt;/p&gt;
&lt;p&gt;헛된 상상이 아닌, 가치 있는 상상이 되려면 우선 이 결과물이 어떻게 사용될 지 예상하는 것과, 결과물을 만드는데 동원되는 도구들에 대해 많은 경험이 요구된다. 저장하는 데이터의 크기는 얼마나 큰지, 얼마나 자주 많은 데이터가 들어오는지, 어떤 하드웨어 수준에서 동작될 것인지 - 이런 것과 마찬가지로 내가 만드는 포스터는 어디에 부착되고 얼마나 먼 거리에서 몇 명이 볼 것이며, 대상 청중은 어떤 교육을 받고 어떤 기대를 가지고 오는 사람들인지 알고 예측할 수 있어야 하며, 사용하는 도구는 어떻게 동작하고 어떤 한계를 가지고 있는지 알고 있어야 빠른 예상이 가능할 것이다.&lt;/p&gt;
&lt;p&gt;좋은 코드를 작성하기 위해서 다른 좋은 코드를 많이 보는 것 / 좋은 디자인을 위해서 다른 좋은 디자인을 많이 보는 것이 기본이지만, 자신이 사용하는 도구에 익숙해지는 것도 생산성을 높이는 것 뿐 아니라 기능과 한계를 명확히 앎으로써 더 나은 작업을 가능하게 할 수 있다고 생각한다.&lt;/p&gt;
&lt;p&gt;처음으로 돌아가보면, 이 홍보물이 사용될 곳과 취업 박람회에 참가할 대학생들은 어떤 부분을 유심하게 볼 지 고민했었고, 우리 회사가 할당받은 부스의 크기를 감안해 부스 디자인, 포스터 디자인 그리고 홍보물 디자인을 조화롭게 하기 위해 노력했었다. 스케치와 시안은 서로 다른 사람이 한 것이 아니라, 내가 직접 한 것이었고, 대충 그린 그림을 주고 “이렇게 해보세요” 했던 것이 아니라, 어떤 도구로 이 제품을 제작해야할 지, 어떤 부분을 강조해서 넣으면 좋을 지 감안해서 종이에 그림을 그렸다. &lt;/p&gt;
&lt;p&gt;저 사진을 페이스북에 올렸던 이유를 생각해봤는데, 도구를 다루는 능력이 부족해도 수록될 콘텐츠에 대한 이해가 있다면, 시간을 절약해서 적당한 품질로 작업하는 것이 가능하다는 얘기를 하고 싶었던 것 같다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="branding"></category><category term="design"></category><category term="concept"></category><category term="sketch"></category></entry><entry><title>segfault by ssl_session_cache in Nginx</title><link href="//lqez.github.io/blog/segfault-by-ssl_session_cache-in-nginx.html" rel="alternate"></link><published>2014-07-22T00:00:00+09:00</published><updated>2014-07-22T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2014-07-22:/blog/segfault-by-ssl_session_cache-in-nginx.html</id><summary type="html">&lt;p&gt;과거에는 SSL 웹서비스를 위해서 도메인 별로 다른 IP를 써야만 했었다.
하지만 &lt;a href="http://en.wikipedia.org/wiki/Server_Name_Indication"&gt;Server Name Indication&lt;/a&gt;이 등장한 이후로,
하나의 물리 IP에 여러 도메인의 SSL 웹 서비스가 가능해졌는데, 이를 위해 웹 서버 뿐 아니라 클라이언트에서의 지원도 필요하다.
대표적으로 Internet Explorer 6 등은 SNI를 지원하지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Server_Name_Indication#Client_side"&gt;SNI를 지원하지 않는 클라이언트 목록&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;회사에서도 SNI를 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;과거에는 SSL 웹서비스를 위해서 도메인 별로 다른 IP를 써야만 했었다.
하지만 &lt;a href="http://en.wikipedia.org/wiki/Server_Name_Indication"&gt;Server Name Indication&lt;/a&gt;이 등장한 이후로,
하나의 물리 IP에 여러 도메인의 SSL 웹 서비스가 가능해졌는데, 이를 위해 웹 서버 뿐 아니라 클라이언트에서의 지원도 필요하다.
대표적으로 Internet Explorer 6 등은 SNI를 지원하지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Server_Name_Indication#Client_side"&gt;SNI를 지원하지 않는 클라이언트 목록&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;회사에서도 SNI를 지원하는 Nginx를 통해 여러 SSL 웹서비스를 운영하고 있는데,
특정 클라이언트로 접속한 경우에 Nginx 가 종료되는 문제가 발생하였다.
최적화를 위해 도입한 &lt;code&gt;ssl_session_cache&lt;/code&gt; directive를 추가한 이후에 발생한 문제였는데,
검색해보니 동일한 증상이 Nginx Trac에 보고되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trac.nginx.org/nginx/ticket/235"&gt;http://trac.nginx.org/nginx/ticket/235&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;덧) 이 글을 처음 썼던 시점으로부터 1년이 지나 2015년 10월에서야 수정되어 Nginx 1.9.6에 반영되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://trac.nginx.org/nginx/timeline?from=2015-10-20T16%3A38%3A08Z&amp;amp;precision=second"&gt;https://trac.nginx.org/nginx/timeline?from=2015-10-20T16%3A38%3A08Z&amp;amp;precision=second&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="nginx"></category><category term="openssl"></category></entry><entry><title>Fool Upstart</title><link href="//lqez.github.io/blog/fool-upstart.html" rel="alternate"></link><published>2014-07-17T00:00:00+09:00</published><updated>2014-07-17T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2014-07-17:/blog/fool-upstart.html</id><summary type="html">&lt;h1&gt;Upstart&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://upstart.ubuntu.com/"&gt;Upstart&lt;/a&gt;는 /sbin/init 를 대체하기 위한 우분투의 기본 서비스 관리자다.
다양한 서비스를 daemon 형태로 관리하고, 죽은 경우에 자동으로 다시 실행할 수 있는 등 편리한 기능을 갖추고 있다.&lt;/p&gt;
&lt;p&gt;프로세스 ID를 받아 해당 프로세스가 잘 동작하는지 감시해야 하므로,
해당 서비스가 어떤 형태로 시작되는지 알고 있어야 정확한 프로세스 ID를 얻을 수 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Upstart&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://upstart.ubuntu.com/"&gt;Upstart&lt;/a&gt;는 /sbin/init 를 대체하기 위한 우분투의 기본 서비스 관리자다.
다양한 서비스를 daemon 형태로 관리하고, 죽은 경우에 자동으로 다시 실행할 수 있는 등 편리한 기능을 갖추고 있다.&lt;/p&gt;
&lt;p&gt;프로세스 ID를 받아 해당 프로세스가 잘 동작하는지 감시해야 하므로,
해당 서비스가 어떤 형태로 시작되는지 알고 있어야 정확한 프로세스 ID를 얻을 수 있다.
Upstart 설정 중, &lt;a href="http://upstart.ubuntu.com/cookbook/#expect"&gt;expect stanza&lt;/a&gt;가 이를 결정하며 일반적인 프로세스는 설정하지 않아도 동작하지만,
해당 프로세스가 fork 되어 동작하거나 daemonize 되는 경우, 별도의 값을 지정해야 정확한 ID 확인이 가능하다.
이 부분에 혼란을 겪은 사람이 꽤 많아, 홈페이지 에서 별도로 안내하고 있을 정도다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://upstart.ubuntu.com/cookbook/#implications-of-misspecifying-expect"&gt;6.13.5 Implications of Misspecifying expect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Symptom&lt;/h2&gt;
&lt;p&gt;보통은 이 값을 잘못 설정한 경우에 서비스가 제대로 감시되지 않거나, 종료되지 않는 등의 문제가 생기는데
오늘은 해당 서비스를 재시작하면서 별다른 설정의 변경이 없었음에도 불구하고, 이상한 상태에 빠지고 말았다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ initctl list &lt;span class="p"&gt;|&lt;/span&gt; grep flower
one/flower start/killed, process &lt;span class="m"&gt;14645&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이 상황에서는 &lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; 명령어가 전부 hang이 되어 서비스 재시작이나 종료가 불가능하다.
&lt;code&gt;start/killed&lt;/code&gt; 로 표시되는 프로세스 ID를 &lt;code&gt;ps&lt;/code&gt;로 찾아보면 당연히 없는 프로세스 ID다.
한참을 헤매다 혹시나 싶어 upstart configuration 파일을 복제하여 다른 이름으로 바꿨더니, 제대로 동작한다!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ initctl list &lt;span class="p"&gt;|&lt;/span&gt; grep flower
one/flower start/killed, process &lt;span class="m"&gt;14645&lt;/span&gt;
one/flower_dup start/running, process &lt;span class="m"&gt;17171&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;시스템을 재시작하면 복구될 것 같았지만, 당장 재시작할 수 없는 프로덕션 시스템이라
혹시나 하여 구글링을 계속하다보니 누군가 만들어둔 루비 스크립트를 찾게 되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ion1/workaround-upstart-snafu"&gt;https://github.com/ion1/workaround-upstart-snafu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로세스가 &lt;code&gt;start/killed&lt;/code&gt; 또는 &lt;code&gt;stop/killed&lt;/code&gt; 상태일 때 사용할 수 있는 이 스크립트는,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;포크하여 프로세스 A를 하나 생성한다.&lt;/li&gt;
&lt;li&gt;프로세스 A에서 문제의 프로세스 ID를 받을 때까지 계속해서 자식 프로세스 B를 포크한다.&lt;/li&gt;
&lt;li&gt;지정된 ID를 얻으면 프로세스 A, B를 모두 종료한다.&lt;/li&gt;
&lt;li&gt;Upstart는 이것이 정상적인 프로세스 종료로 판단하고 혼란 상황에서 빠져나온다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;우여곡절 끝에 문제 해결.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ initctl list &lt;span class="p"&gt;|&lt;/span&gt; grep one
one/flower start/running, process &lt;span class="m"&gt;14810&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="diary"></category><category term="ubuntu"></category></entry><entry><title>Today works</title><link href="//lqez.github.io/blog/today-works.html" rel="alternate"></link><published>2013-10-16T00:00:00+09:00</published><updated>2013-10-16T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-10-16:/blog/today-works.html</id><summary type="html">&lt;p&gt;뭘 하고 사는지 괜히 바쁜것 같아, 하루 일과를 정리해보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;집에서 출발, 회사까지 걸어서 출근하기.&lt;/li&gt;
&lt;li&gt;신규 입사자 면담.&lt;/li&gt;
&lt;li&gt;VPN 설정 수정.&lt;/li&gt;
&lt;li&gt;사내 서버실에서 랜선 교체작업, 케이블 정리, 서버 설치.&lt;/li&gt;
&lt;li&gt;사내 서버실 냉각 / 경보 장치 관련하여 짧은 미팅.&lt;/li&gt;
&lt;li&gt;신규 API 서비스 코드 리뷰. &lt;/li&gt;
&lt;li&gt;기존 API 서비스의 pagination 관련 토론.&lt;/li&gt;
&lt;li&gt;N사와 3세대 프로젝터 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;뭘 하고 사는지 괜히 바쁜것 같아, 하루 일과를 정리해보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;집에서 출발, 회사까지 걸어서 출근하기.&lt;/li&gt;
&lt;li&gt;신규 입사자 면담.&lt;/li&gt;
&lt;li&gt;VPN 설정 수정.&lt;/li&gt;
&lt;li&gt;사내 서버실에서 랜선 교체작업, 케이블 정리, 서버 설치.&lt;/li&gt;
&lt;li&gt;사내 서버실 냉각 / 경보 장치 관련하여 짧은 미팅.&lt;/li&gt;
&lt;li&gt;신규 API 서비스 코드 리뷰. &lt;/li&gt;
&lt;li&gt;기존 API 서비스의 pagination 관련 토론.&lt;/li&gt;
&lt;li&gt;N사와 3세대 프로젝터 관련 미팅.&lt;/li&gt;
&lt;li&gt;사내 LDAP 서버 문제 수정.&lt;/li&gt;
&lt;li&gt;사무실 확장에 따른 무선 네트워크 장비 추가, 무선 프린팅 설정 및 내역 안내.&lt;/li&gt;
&lt;li&gt;Emoji와 관련해서 utf8mb4 관련 문제 파악 및 수정.&lt;/li&gt;
&lt;li&gt;Nginx + uwsgi_params 관련하여 문제 파악 및 수정.&lt;/li&gt;
&lt;li&gt;npk JNI 관련 문의 답장.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;써놓고 보니 low-level system engineer 적인 일만 하고 있다. 회사에 SE가 없어서 그런건가.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="diary"></category></entry><entry><title>Happy birthday to me, 2013</title><link href="//lqez.github.io/blog/happy-birthday-to-me-2013.html" rel="alternate"></link><published>2013-08-28T00:00:00+09:00</published><updated>2013-08-28T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-08-28:/blog/happy-birthday-to-me-2013.html</id><summary type="html">&lt;p&gt;&lt;img alt="A drawing on my birthday" src="./images/2013-08/birthday.jpg"&gt;&lt;/p&gt;
&lt;p&gt;언제부턴가 생일에 특별한 의미를 부여하거나, 챙겨서 뭘 하진 않게 되었다.
어차피 날짜라는 건 연속적인 시간을 인간의 기준에 맞춰 불연속적인 개념으로 부르는 것일 뿐이라고 생각한다.
하지만 오늘은 어쩐지 회사 창업 후 달라진 모습을 기록해보고 싶다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;사실 거의 10년간 다니던 회사를 그만두고 지금의 일을 시작하는데 우아한 동기나 굳은 마음가짐이 있었던 건 아니다 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="A drawing on my birthday" src="./images/2013-08/birthday.jpg"&gt;&lt;/p&gt;
&lt;p&gt;언제부턴가 생일에 특별한 의미를 부여하거나, 챙겨서 뭘 하진 않게 되었다.
어차피 날짜라는 건 연속적인 시간을 인간의 기준에 맞춰 불연속적인 개념으로 부르는 것일 뿐이라고 생각한다.
하지만 오늘은 어쩐지 회사 창업 후 달라진 모습을 기록해보고 싶다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;사실 거의 10년간 다니던 회사를 그만두고 지금의 일을 시작하는데 우아한 동기나 굳은 마음가짐이 있었던 건 아니다.
그저 변하지 않는 주변의 모습과 마찬가지로 발전 없는 내 모습이, 그리고 크게 나아지지 않는 상황이 나를 다른 곳으로 이끌었을 뿐이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;어쨌든 도망친 거다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;새로운 회사에 참여하기 전에는 나 자신이 기존에 있었던 곳에서의 도망자, 패배자 그리고 낙오자라고 생각되었다.
컴퓨터 게임 분야에서 성공하지 못했기에 다른 분야로 도망간 것뿐이다. 정말로 그렇게 생각했다.&lt;/p&gt;
&lt;p&gt;그럼에도 불구하고 첫해에는 헛바람이 많이 들어갔다.
모바일 시장이 열린다며 주변에서 웅성거리는 분위기가 꼭 나를 위한 것 같고, 나도 뭔가 해낼 수 있을 것 같았다.
당연하게도 그런 일은 일어나지 않았다. 나는 여전히 무명이었으며, 우리 회사도 여전히 무명이었고 다른 이들은 계속 앞으로 나아가고 있었다.&lt;/p&gt;
&lt;p&gt;마음만 급했지, 실제도 제대로 하는 일은 없었고, 주변에 아무런 도움이 되질 못 했다.&lt;/p&gt;
&lt;p&gt;여전히 시장을 읽을 줄 몰랐고, 이상향만 꿈꾸며 현실적인 작업들은 주변의 사람들에게 미루기 일쑤였다.
왜 예전만큼 능률이 오르지 않을까, 재미있을 줄 알고 시작했는데 왜 재미가 없을까...
변명은 늘어갔고 벌여놓은 일들은 수습되지 않은 상태로 시간이 훅 지나가 버렸다.&lt;/p&gt;
&lt;p&gt;애초에 인정하고 시작했으면 좋았을 것 같다.
다른 사람에게는 "전 뛰어난 개발자가 아니고 그냥 딱풀 같은 존재입니다." 라고 얘기하곤 했지만, 내 마음속에서는 아니라고 말하고 있었다.
나는 여전히 유능한 프로그래머여야 하고, 유능한 시스템 엔지니어와 데이터베이스 전문가일 뿐 아니라, 인터페이스 전문가이기를 꿈꿨다.
그 와중에 회사가 빨리 성장했으면 좋겠고, 얼른 돈을 크게 벌어 영화에서 나오듯 돈 걱정 없이 좋은 집에,
포르쉐를 타고 출퇴근하는 쿨한 엔지니어가 되기를 원했으니, 아무것도 되지 않는 게 어쩌면 당연한 결과였다.&lt;/p&gt;
&lt;p&gt;아무리 좋은 아이디어가 있어도 구현하지 않으면 소용없고,
그렇게 구현한 서비스가 아무리 뛰어나도 시장에서 원하지 않는 물건이라면 환영받지 못할 수 있는데,
나는 그 어떤 것도 제대로 해내지 못했다.&lt;/p&gt;
&lt;p&gt;그런 점에서 나보다 훨씬 뛰어나고 현실 감각이 좋은 사람들과 함께하게 된 것은 정말 행운이었다.
내가 매일 꿈만 꾸고 있을 때, 실제로 일을 해내고 서비스를 만들어낸 사람들이 곁에 있어 정말 다행이었다.
그들이 있어 아직 회사가 버티고 있을 뿐 아니라, 의미 있는 성과도 내고 있다.
그 성과 덕분에 투자도 성공적으로 유치하여 더 큰 일을 할 수 있는 회사로 성장할 수 있는 발판도 마련할 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;지난 3년간 그들과 함께한 덕분에 작은 성공을 맛보기도 했지만, 더 소중한 것은 그들 덕분에, 그들을 통해,
&lt;strong&gt;내가 어떤 사람이고 무엇을 할 수 있는 사람인지&lt;/strong&gt; 더 객관적으로 볼 수 있게 된 점이다.
이제는 내가 할 수 있는 일이 무엇이고, 할 수 없는 일은 무엇인지 조금 더 알게 되었고 이를 바탕으로 조금이나마 도움이 되려고 노력하고 있다.&lt;/p&gt;
&lt;p&gt;더불어, 회사를 옮긴 이후에 PC에서 모바일 플랫폼으로, 게임 시장에서 교육 및 멀티미디어 시장으로 '내려왔다'고 생각했는데, 정말 잘못된 생각이었다.
이전보다도 오히려 더 높은 기술 수준과 완성도를 요구하는 일들이 즐비한 곳이었다.
기존에 알고 있던 지식이 썩어 문드러지는 곳이 아니라, 오히려 겨우 익혀왔던 그 얇은 지식 위에 쌓이는 지식과 경험이 너무 많았다.&lt;/p&gt;
&lt;p&gt;허황된 생각과 헛바람에 빠져 몇 년간을 지내왔지만, 나도 모르게 새로운 세상에 눈을 뜨게 되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter와 IRC에서 만난 수 없이 많은 유능한 엔지니어들.&lt;/li&gt;
&lt;li&gt;개발자 컨퍼런스에서 우연히 얻는 키워드들과 그곳에서 마주치는 사람들.&lt;/li&gt;
&lt;li&gt;파이썬에 관심을 가지게 되면서 만난 사람들과 &lt;a href="https://www.facebook.com/groups/pythonkorea/"&gt;한국 파이썬 커뮤니티&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://perl.kr/"&gt;Seoul.pm&lt;/a&gt; 분들을 우연히 만나게 되어 알게 된 펄 커뮤니티와 그 세계.&lt;/li&gt;
&lt;li&gt;번역 사이트 &lt;a href="http://looah.com/"&gt;Looah&lt;/a&gt;를 통해 공동으로 번역을 하고 공유하는 멋진 경험.&lt;/li&gt;
&lt;li&gt;설명이 필요 없는 &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Google과 &lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;에서 얻는 경험과 노하우.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://soundcloud.com/"&gt;Soundcloud&lt;/a&gt;를 통한 음악 공유의 세상.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;을 통해 맛볼 수 있는 트렌디한 웹/앱 디자인들.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스타트업을 시작하고 나서, 자신에 대해 더 잘 알게 되고, 더 많은 사람을 만나고, 더 넓은 세상을 알게 되어 행복하다.
아직 스포츠카도 없고, 물질적으로 아주 풍요로운 삶을 누리게 된 것도 아니지만, 그보다 훨씬 더 큰 선물을 받은 것 같다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="diary"></category></entry><entry><title>gittip.com and /for/korea</title><link href="//lqez.github.io/blog/gittipcom-and-forkorea.html" rel="alternate"></link><published>2013-05-14T00:00:00+09:00</published><updated>2013-05-14T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-05-14:/blog/gittipcom-and-forkorea.html</id><summary type="html">&lt;p&gt;얼마 전, &lt;a href="http://www.kickstarter.com/projects/andrewgodwin/schema-migrations-for-django"&gt;Schema Migrations for Django&lt;/a&gt; 라는 오픈소스 프로젝트 계획에 대한 모금 활동이 킥스타터에서 큰 성공을 거뒀다. 이제까지 오픈소스를 사용하면서 개발한 이들에게 고마움을 표시하는 방법은 해당 프로젝트를 열심히 사용하며, 버그 제보, 번역, 기능 추가 또는 사용기 발표 정도 밖에 없다고 생각했는데, '금전적인' 후원도 가능하다는 것을 알게 되었다.&lt;/p&gt;
&lt;h2&gt;Gittip&lt;/h2&gt;
&lt;p&gt;&lt;img alt="gittip.png" src="./images/2013-05/gittip.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gittip.com"&gt;https://www …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;얼마 전, &lt;a href="http://www.kickstarter.com/projects/andrewgodwin/schema-migrations-for-django"&gt;Schema Migrations for Django&lt;/a&gt; 라는 오픈소스 프로젝트 계획에 대한 모금 활동이 킥스타터에서 큰 성공을 거뒀다. 이제까지 오픈소스를 사용하면서 개발한 이들에게 고마움을 표시하는 방법은 해당 프로젝트를 열심히 사용하며, 버그 제보, 번역, 기능 추가 또는 사용기 발표 정도 밖에 없다고 생각했는데, '금전적인' 후원도 가능하다는 것을 알게 되었다.&lt;/p&gt;
&lt;h2&gt;Gittip&lt;/h2&gt;
&lt;p&gt;&lt;img alt="gittip.png" src="./images/2013-05/gittip.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gittip.com"&gt;https://www.gittip.com&lt;/a&gt; 은 오픈소스 개발자나 오픈소스 그룹에게 정기적으로 후원을 할 수 있는 웹서비스이다. 앞서 언급한 킥스타터와는 달리, 한 번 기부하고 마는 것이 아니라 지정한 금액을 매주 목요일 기부하게 된다.
궁극적으로 이 사이트를 통해 의미있는 오픈소스 개발을 하는 사람이나 단체가 전업으로 오픈소스를 진행할 수 있는 기반을 갖게된다면 좋겠지만, 아직까지 그 정도로 많은 금액이 오고가는 것으로 보이진 않는다. 하지만, 주기적인 기부는 위와 같은 단기적인 프로젝트 기금 마련과는 다른 방향을 가지고 있고, 이는 오픈소스에 보다 긍정적인 문화를 가져올 것 같다.&lt;/p&gt;
&lt;h2&gt;/for/korea&lt;/h2&gt;
&lt;p&gt;Gittip 의 커뮤니티 기능이 약 &lt;a href="https://github.com/gittip/www.gittip.com/commit/f2ca1fa1f3eb1c8cabe9b98bebc1e180dd669e61"&gt;2주 전에 추가&lt;/a&gt;되었는데, 이에 한국 파이썬 커뮤니티계의 아이돌(...) &lt;a href="https://twitter.com/hongminhee"&gt;@hongminhee&lt;/a&gt; 님이 한국 개발자 커뮤니티(&lt;a href="https://www.gittip.com/for/korea/"&gt;/for/korea&lt;/a&gt;)를 만들고, 가입을 요청하는 트윗을 올렸다.&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" align="center"&gt;&lt;a href="https://twitter.com/hongminhee/status/333868284195770368"&gt;Tweet of hongminhee/333868284195770368&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;해당 요청은 트위터나 페이스북을 통해 오픈소스에 관심이 있는 한국 개발자들에게 빠르게 전파되었고, 덕분에 몇 시간 지나지 않아 커뮤니티 구성 요건의 최소 인원인 150명에 가장 빠르게 도달하였다. 하지만 개발자 &lt;a href="https://twitter.com/whit537"&gt;@whit537&lt;/a&gt; 도 이처럼 빨리 150명에 도달할 것이라 생각하지 못한 모양이다.&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" align="center"&gt;&lt;a href="https://twitter.com/whit537/status/333945787216175104"&gt;Tweet of whit537/333945787216175104&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class="twitter-tweet" align="center"&gt;&lt;a href="https://twitter.com/whit537/status/333948844951891969"&gt;Tweet of whit537/333948844951891969&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/whit537"&gt;@whit537&lt;/a&gt; 은 다음과 같은 커밋을 통해, 'korea' 커뮤니티의 150명 도달에 긴급히 대비하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gittip/www.gittip.com/commit/03429b36850b163879afc64b35d160f8f3c13146"&gt;#03429b3 Get barely ahead of Korea maybe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gittip/www.gittip.com/commit/c52b4c8d817e9c86453f118bbae72d355dedb0b3"&gt;#c52b4c8 Korea beat us to this!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그는 한국에서 왜 이렇게 많은 가입자가 발생했는지 궁금하였던 모양이다. 그에게 아이돌(...)을 소개시켜 주었는데, 결국 &lt;a href="https://twitter.com/hongminhee"&gt;@hongminhee&lt;/a&gt; 님은 &lt;a href="http://freenode.net/"&gt;freenode IRC&lt;/a&gt; 의 #gittip 채널에 들어가 개발자들과 얘기를 몇 마디 나누더니, 그세 개발에 참여하고 있는 것으로 보인다! (&lt;a href="https://github.com/gittip/aspen-python/pull/182"&gt;pull #182&lt;/a&gt;, &lt;a href="https://github.com/gittip/aspen-python/pull/183"&gt;pull #183&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" align="center"&gt;&lt;a href="https://twitter.com/whit537/status/333951758990733312"&gt;Tweet of whit537/333951758990733312&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class="twitter-tweet" align="center"&gt;&lt;a href="https://twitter.com/whit537/status/333952649152053248"&gt;Tweet of whit537/333952649152053248&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;h2&gt;Small step for us&lt;/h2&gt;
&lt;p&gt;&lt;img alt="gittip-korea.png" src="./images/2013-05/gittip-korea.png"&gt;&lt;/p&gt;
&lt;p&gt;Gittip의 커뮤니티 중, &lt;a href="https://www.gittip.com/for/korea/"&gt;/for/korea&lt;/a&gt;가 가장 먼저 최소 요건인 150명을 돌파하였다. 특정 국가 커뮤니티로써 가장 큰 것일 뿐 아니라, 다른 모든 커뮤니티(예:&lt;a href="https://www.gittip.com/for/python/"&gt;/for/python&lt;/a&gt;) 중에서도 가장 인원이 많다. 이렇게 많은 개발자가 이런 사이트에 관심을 가지고 있는 줄 몰랐고, 이렇게 빨리 가입한 것은 더욱 놀랍다. 그럼에도 불구하고 부끄러운 것은, 한국인 커뮤니티에 가입한 사람들이 기부하고 있는 금액이 너무 적다는 점이다. 물론 한국 개발자들 중에서 아직 이 커뮤니티의 존재를 몰라, 가입하지 않은 상태로 기부하고 있을 수도 있겠다. 또는, 페이팔 계정이나 해외에서 자유롭게 결제 가능한 카드를 우리나라에서 만들기가 어려웠던 부분도 있을 것이다. 하지만 이 글을 쓰고 있는 현재, 도합 몇 달러가 채 안되는 금액이라는 것은 조금 아쉽다.&lt;/p&gt;
&lt;p&gt;나는 예전에 &lt;a href="https://twitter.com/hongminhee"&gt;@hongminhee&lt;/a&gt; 님에게 &lt;a href="http://pytest.org/latest/"&gt;py.test&lt;/a&gt; 의 디버깅 도움을 받아, 이 사이트에서 후원하려다가 아직 계좌 연결을 시켜두시지 않은 관계로, 대신 독콜라(...) 한 박스를 보낸적이 있다. 아무튼 오늘 다시 한 번 사이트에 들어간 차에 적은 금액이지만 주당 $1.50 을 후원하도록 설정하였다.&lt;/p&gt;
&lt;p&gt;오픈소스를 만들고 기꺼이 공개한 이들에게 감사를 표시하는 차원에서, 이 글을 읽는 분들도 자기가 쓰고 있는 프로젝트의 개발자나 그룹에 후원해보는 것은 어떨까?&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="gittip"></category><category term="donate"></category><category term="contribute"></category></entry><entry><title>499px</title><link href="//lqez.github.io/blog/499px.html" rel="alternate"></link><published>2013-05-08T00:00:00+09:00</published><updated>2013-05-08T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-05-08:/blog/499px.html</id><summary type="html">&lt;p&gt;&lt;a href="https://twitter.com/drypot"&gt;&lt;a href="https://twitter.com/drypot"&gt;@drypot&lt;/a&gt;&lt;/a&gt; 님이 의지를 불태워 &lt;a href="http://rapixel.com"&gt;http://rapixel.com&lt;/a&gt; 을 만들고 있는 것에 감명받아,
예전부터 만들고 싶었던 사진 저장/공유 사이트 아이디어를 구체화 해보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원본 사진을 보관한다.&lt;/li&gt;
&lt;li&gt;모바일 앱에서 바로 사진을 올릴 수 있다.&lt;/li&gt;
&lt;li&gt;모두에게 공유할 수도 있지만, 기본적으로는 나만 본다.&lt;/li&gt;
&lt;li&gt;이러한 공유 설정은 폴더 단위로 작동한다.&lt;/li&gt;
&lt;li&gt;폴더에 하위 폴더는 없다.&lt;/li&gt;
&lt;li&gt;특정 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drypot"&gt;&lt;a href="https://twitter.com/drypot"&gt;@drypot&lt;/a&gt;&lt;/a&gt; 님이 의지를 불태워 &lt;a href="http://rapixel.com"&gt;http://rapixel.com&lt;/a&gt; 을 만들고 있는 것에 감명받아,
예전부터 만들고 싶었던 사진 저장/공유 사이트 아이디어를 구체화 해보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원본 사진을 보관한다.&lt;/li&gt;
&lt;li&gt;모바일 앱에서 바로 사진을 올릴 수 있다.&lt;/li&gt;
&lt;li&gt;모두에게 공유할 수도 있지만, 기본적으로는 나만 본다.&lt;/li&gt;
&lt;li&gt;이러한 공유 설정은 폴더 단위로 작동한다.&lt;/li&gt;
&lt;li&gt;폴더에 하위 폴더는 없다.&lt;/li&gt;
&lt;li&gt;특정 사용자와 폴더를 공유한다.&lt;/li&gt;
&lt;li&gt;공유된 폴더는 다른 사용자도 사진을 올릴 수 있다.&lt;/li&gt;
&lt;li&gt;노출되는 기기의 종류나 해상도에 따라, 적합한 화면을 제공한다.&lt;ul&gt;
&lt;li&gt;폰에서는 한 장씩 넘기면서 편하게 보고,&lt;/li&gt;
&lt;li&gt;PC나 태블릿에서는 목록과 함께 보기,&lt;/li&gt;
&lt;li&gt;TV에서는 켄-번 효과가 적용된 슬라이드 또는 오리가미 등.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기까지는 플리커나 밴드, 뭐 기타 여러 사진 웹/앱 서비스와 다를 바가 없다.
아래는 추가할 기능.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정 위치에 클릭/터치를 하고 있으면 &lt;a href="http://en.wikipedia.org/wiki/Loupe"&gt;루페&lt;/a&gt;가 나와 확대해서 볼 수 있다.&lt;/li&gt;
&lt;li&gt;해당 폴더에 D-day를 지정해, 기념일로부터 며칠이 지났는지 또는 며칠이 남았는지 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;폴더는 기본적으로 n일 후에 자동 폭파된다.&lt;/li&gt;
&lt;li&gt;영구히 보관하는 기능은 유료로 제공.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;너무 길다. 하고 싶었던건 그저, &lt;strong&gt;"사진을 지인들과 편리하게 같이 보고 싶다."&lt;/strong&gt; 였는데.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="idea"></category><category term="photo"></category><category term="web"></category></entry><entry><title>Making a fan page for a 'Developer conference'</title><link href="//lqez.github.io/blog/making-a-fan-page-for-a-developer-conference.html" rel="alternate"></link><published>2013-04-20T00:00:00+09:00</published><updated>2013-04-20T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-04-20:/blog/making-a-fan-page-for-a-developer-conference.html</id><summary type="html">&lt;h1&gt;Preface&lt;/h1&gt;
&lt;p&gt;2012년 4월, 모 게임회사의 개발자 컨퍼런스가 열린다는 소식을 듣고, 기쁜 마음에 해당 컨퍼런스의 홈페이지에 접속했다.
대형 포털 업체의 블로그 시스템을 이용한 페이지라 조금 실망했지만, 보통 이런 행사에 인력을 충분히 할당할 수 없음을 알기에 이해했다.&lt;/p&gt;
&lt;p&gt;하지만, 일정표를 거대한 이미지 파일 하나로 배포하는 것을 보고, 아쉬운 마음을 감출 수 없었다.
개발자 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Preface&lt;/h1&gt;
&lt;p&gt;2012년 4월, 모 게임회사의 개발자 컨퍼런스가 열린다는 소식을 듣고, 기쁜 마음에 해당 컨퍼런스의 홈페이지에 접속했다.
대형 포털 업체의 블로그 시스템을 이용한 페이지라 조금 실망했지만, 보통 이런 행사에 인력을 충분히 할당할 수 없음을 알기에 이해했다.&lt;/p&gt;
&lt;p&gt;하지만, 일정표를 거대한 이미지 파일 하나로 배포하는 것을 보고, 아쉬운 마음을 감출 수 없었다.
개발자 컨퍼런스라는 것이 단순히 발표를 듣고 끝내는 것이 아니라, 개발자 간 교류의 장이 되고 그 안에서 새로운 기회를 발견하는 것을 자주 목격했기에,
이를 위해 적절한 온라인 '시장'이 필요하다고 생각했다.&lt;/p&gt;
&lt;p&gt;늘 그렇듯 회사 일에 치여, 컨퍼런스에 참여하지도 못했고 '시장'도 만들지 못했다.
그리고 1년이 지나, 다시 한 번 같은 회사에서 개발자 컨퍼런스를 연다고 했을 때,
이번에는 좋은 세션도 많이 듣고, 다른 개발자들도 만나고 싶어 바로 참가신청을 했다.
헌데, 작년과 마찬가지로 올해도 같은 블로그 시스템에, PDF 형식으로 자료를 배포하는 것을 보니, 너무 안타까웠다. &lt;/p&gt;
&lt;p&gt;잡소리가 길었다. 그냥 이건 좀 아니다 싶었고, 그래서 만들기로 했다. 올해 배포된 자료를 보고 다음의 기능을 갖춘 팬 사이트를 만들면 좋겠다 싶었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;태그가 제공되니, 태그에 맞춰 필터링하기.&lt;/li&gt;
&lt;li&gt;발표자의 홈페이지, 트위터 아이디 등의 기본 정보와 발표 자료, 비디오를 잘 모아보기.&lt;/li&gt;
&lt;li&gt;세션을 진행할 때 사용할 수 있도록, 질문 등을 댓글 기능을 통해 받을 수 있도록 하기.&lt;/li&gt;
&lt;li&gt;어떤 세션을 들을지 미리 체크해둘 수 있는 기능.&lt;/li&gt;
&lt;li&gt;가능하면 페이스북 그래프를 통해, 나랑 같은 세션을 들을 친구가 누구인지 확인하기.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기술/구현에 대해서는 다음에 것들을 달성하고 싶었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모바일 기기에서 잘 보여지기. 단순히 잘 보여지는게 아니라, 정보의 누락을 최소화하기.&lt;/li&gt;
&lt;li&gt;댓글 플러그인을 도입해서, 부담을 줄이기.&lt;/li&gt;
&lt;li&gt;비밀번호 없이 이메일로 로그인하는 기능을 시도하기.&lt;/li&gt;
&lt;li&gt;Flat UI가 대세라고 하니, 이걸 한 번 써보기.&lt;/li&gt;
&lt;li&gt;Django를 너무 대충 써와서, Class-based View 등을 써보기.&lt;/li&gt;
&lt;li&gt;만든 코드를 공개하여, 그럭저럭 괜찮은 Django 샘플 코드로 활용되기.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;'하라는 일은 안하고' 작업을 시작했다. 작업하는 동안 화면을 종종 캡춰했고, 이를 정리해봤다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;4월 11일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;23:29&lt;/code&gt; 딸을 재우고 와이프가 TV를 보는 동안 작업을 시작했다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;23:29&lt;/code&gt; Github에 리포지터리를 생성했다. 리포지터리를 생성하는 것만으로도 뭔가 달성한 기분이 든다.
&lt;img alt="0411-01.jpg" src="./images/2013-04/0411-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;23:30&lt;/code&gt; &lt;code&gt;virtualenv&lt;/code&gt;를 통해 독립 공간을 마련하고, Django 1.5 를 설치했다. 일단 It worked.
&lt;img alt="0411-02.jpg" src="./images/2013-04/0411-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;23:35&lt;/code&gt; 자료를 훑어보며 모델을 어떻게 만들지 고민했다.
&lt;img alt="0411-03.jpg" src="./images/2013-04/0411-03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;23:47&lt;/code&gt; &lt;code&gt;syncdb&lt;/code&gt;로 처음으로 데이터베이스를 생성했다. 
&lt;img alt="0411-04.jpg" src="./images/2013-04/0411-04.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;00:00&lt;/code&gt; PDF 자료를 확대하여 이미지를 일부 캡춰했다. 원래 아이콘이나 이미지가 있어야 작업이 잘 되니까 일단 쓸데없는 짓을 좀 했다.
&lt;img alt="0411-05.jpg" src="./images/2013-04/0411-05.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;00:07&lt;/code&gt; 자료를 보며 &lt;code&gt;Django admin&lt;/code&gt;을 통해 기초 데이터를 입력하기 시작했다. 갈 길이 멀다. 
&lt;img alt="0411-06.jpg" src="./images/2013-04/0411-06.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;00:17&lt;/code&gt; 머리가 나쁘니까 손발이 고생한다. 잘못 설계된 모델들을 수정하기 위해 &lt;code&gt;south&lt;/code&gt;를 설치하고 마이그레이션을 하기 시작했다.
머리가 나쁜 것을 탓하다 졸려서 잠들었다.
&lt;img alt="0411-07.jpg" src="./images/2013-04/0411-07.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;4월 12일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;14:46&lt;/code&gt; 회사에 출근은 했는데, 마음은 밭에 가 있으니 오전 내내 싱숭생숭하다가, 점심 먹고 데이터 입력을 시작했다.
&lt;img alt="0412-01.jpg" src="./images/2013-04/0412-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;15:50&lt;/code&gt; 데이터 입력만 한 시간 내내 해서 드디어 입력을 끝냈다. 자동으로 긁는 도구를 만들까 하다가 그게 더 큰 일이 될게 뻔하니 관두고 몸빵했다. 
다 하고 나니 눈치가 보여서 회사 일을 좀 했다.
&lt;img alt="0412-02.jpg" src="./images/2013-04/0412-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;18:47&lt;/code&gt; 저녁을 회사에서 먹고 드디어 첫 템플릿 코드를 작성했다. 그냥 목록이 나오는거 뿐인데도 뿌듯했다. 
이후에 타임테이블용 템플릿 작업을 무지하게 했는데 머리가 잘 안돌아가서 걍 퇴근했다. 역시 야근... 아니 밤에 코딩하는건 효율이 나쁘다.
&lt;img alt="0412-03.jpg" src="./images/2013-04/0412-03.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;4월 13일 - 4월 14일&lt;/h2&gt;
&lt;p&gt;팬심이 아무리 강해도, 유부남의 주말은 가족과 함께 보낼 수 밖에 없다. 한 줄도 못 짜고 이틀이 지나갔다.&lt;/p&gt;
&lt;h2&gt;4월 15일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;10:50&lt;/code&gt; 집에서 회사까지 약 5km 정도 되는데, 아침부터 뭔 바람이 불었는지 걸어서 출근했다. 
쉰냄새를 풍기면서 타임테이블 템플릿 코딩을 계속했다. 엉성하지만 출력되는 것을 보고 조금 감동했다. &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 태그 따위에 말이지.
&lt;img alt="0415-01.jpg" src="./images/2013-04/0415-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;11:08&lt;/code&gt; 눈에 뭐가 보이니까, 장식 예술을 슬슬 하기 시작했다. 지난 주에 미리 캡춰해둔 이미지가 있어 끼워 넣으니 뭔가 그럴싸해졌다.
&lt;img alt="0415-02.jpg" src="./images/2013-04/0415-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;16:36&lt;/code&gt; 잉여짓만 하니까 또 미안한 마음이 들어, 잠깐 회사 일을 하는 척 하다, 또 장식 예술을 하고 있다.
아무래도 색상과 픽토그램이 같이 붙어 있는 이미지는 별론거 같아, 픽토그램만 떼어내고 색상 정보를 따로 입력하기로 했다.
나중에 모델에 색상 정보 넣었던 건 다시 버리고, 대신 클래스 이름을 넣고, 색상을 CSS 쪽으로 옮겼다. (휴-)
&lt;img alt="0415-03.jpg" src="./images/2013-04/0415-03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;17:38&lt;/code&gt; 타임테이블에 태그 아이콘을 떼어내고 태그바를 붙였더니 한결 나아보였다. 하라는 코딩은 안하고 점점 CSS에 빠져들고 있다.
&lt;img alt="0415-04.jpg" src="./images/2013-04/0415-04.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;21:27&lt;/code&gt; 회사에서 밥을 먹고 네이게이션 바를 붙였다. 그냥 &lt;code&gt;Bootstrap&lt;/code&gt;보다는 역시 &lt;code&gt;Flat-UI&lt;/code&gt;가 힙해보인다, 는 착각이 든다.
너무 늦는거 같아 대충 열시에 정리하고 퇴각.
&lt;img alt="0415-05.jpg" src="./images/2013-04/0415-05.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;4월 16일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;14:52&lt;/code&gt; 또 걸어서 출근했더니 오전이 쉰내와 함께 갑자기 사라지고 말았다! 아무튼 점심 먹고 또 CSS에 빠져들었다. 툴팁 붙이고 신났다!
이 때부터 &lt;code&gt;imgur&lt;/code&gt;에 올려서 IRC 에 링크도 올리고 했다. 슬슬 초기 버프가 떨어지고 재미가 없어지는 시점이었던거 같다.
&lt;img alt="0416-01.jpg" src="./images/2013-04/0416-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;17:23&lt;/code&gt; 짬짬히 템플릿 코딩을 계속했다. 동료의 어깨 너머로 배운 &lt;code&gt;Class based view&lt;/code&gt; 덕분에 뷰 코딩은 거의 안하고, 장식 예술에 빠질 수 있었다.
&lt;code&gt;moot.it&lt;/code&gt;이 &lt;code&gt;disqus&lt;/code&gt;보다 예뻐보여 일단 넣어보았다. 넣기 정말 쉽긴 한데, 나중에 폰 뷰에서 제대로 안나오고 페이스북 로그인만 지원해서 빼버렸다.
&lt;img alt="0416-02.jpg" src="./images/2013-04/0416-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;18:18&lt;/code&gt; 이제 대놓고 이것만 만들기 시작했다. 다음 주가 바로 컨퍼런스 일인데 너무 늦게 알리면 아무도 안 봐줄꺼고, 그러면 아쉬울까봐.
스타일이 대충 결정되고 나니 꾸미는데 속도가 좀 붙는다. 이 즈음에 태그를 눌러 필터링하는 기능이 추가되었다.
&lt;img alt="0416-03.jpg" src="./images/2013-04/0416-03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;19:39&lt;/code&gt; 어설프게 만들고 놔두는거 싫어하는데, 마침 회식이 생겨 퇴각했다. 이날 술 먹고 체력이 저하되었ㄷㅈㅁ데ㅓㅐ러....
&lt;img alt="0416-04.jpg" src="./images/2013-04/0416-04.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;4월 17일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;14:22&lt;/code&gt; 어제 만들다 놔둔 발표자 페이지를 꾸미기 시작했다. 트위터 아이디를 넣고 트위터 API로 프로필 이미지를 불러오도록 했다.
&lt;img alt="0417-01.jpg" src="./images/2013-04/0417-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;14:49&lt;/code&gt; 발표자 개인 페이지는 아직 넣을만한 내용이 별로 없어 한산하다. 아무튼 여기도 moot.it 넣고 마무리했다.
&lt;img alt="0417-02.jpg" src="./images/2013-04/0417-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;16:52&lt;/code&gt; 별로 중요하지도 않은 검색기능인데, 이걸 누군가에게 Django 데모 프로젝트로 보여주려면 꼭 있어야 겠다는 헛생각이 들어서,
&lt;code&gt;haystack&lt;/code&gt; 기본 백엔드로 일단 넣었다.
&lt;img alt="0417-03.jpg" src="./images/2013-04/0417-03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;17:32&lt;/code&gt; 각 세부 페이지가 대충 마무리된 것 같아, 대문을 뚝딱 뚝딱 만들었다. 이미지는 조금만 쓰고 해당 컨퍼런스와 어울리게끔 만들었다.
나중에서야 깨닫게 되는 것지만, 이런 식으로 약간 그럴싸하게 만든게 문제가 아니었을까 싶다.
만들면서 계속 크기를 줄여가며 반응형 - 이 말을 별로 좋아하진 않지만 - 페이지로 계속 갈아 엎어 나갔다.
어제 술 먹고 늦게 들어온게 미안해, 퇴근하고 집에서 가족과 함께 시간을 보냈다.
&lt;img alt="0417-04.jpg" src="./images/2013-04/0417-04.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;24:01&lt;/code&gt; 집에 와서 아까 만든 페이지를 보며 뿌듯해 하려고 했는데, 계속 크롬으로 개발해서 그런지 파이어폭스 등에서 난리가 나고 있다는 걸 몰랐다.
&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 태그에 &lt;code&gt;position: relative&lt;/code&gt; 가 안되는 걸 뒤늦게 깨닫고 멘붕. 이걸 해결하기 위해 자바스크립트를 끼얹는 만행을 저지르고 말았다.
테이블 셀 우하단에 발표자 이름과 회사 이름 위치시키는게 이렇게 어려울 줄이야. 이걸 새벽 3시까지 했다.
&lt;img alt="0417-05.jpg" src="./images/2013-04/0417-05.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;4월 18일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;19:13&lt;/code&gt; 어젯 밤에 늦게 자서 아예 휴가를 내고 본격적으로 마무리 작업을 했다. 뭔가 많이 다듬긴 했는데 기억나는게 몇 개 없는건 왜일까.
사이트 자체 작업보다는, 회사 서버에 이걸 올려 실제 서비스하기 위한 준비를 했다.
아무튼 친구와 같이 커피숍에서 배터리 떨어질 때까지 작업하며 이메일로 로그인하기 기능의 기본을 다 만들었다. 
가족과 함께 저녁을 먹고 놀다가, favicon 을 만들고 일찍 잠들었다.
&lt;img alt="0418-01.jpg" src="./images/2013-04/0418-01.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;4월 19일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;09:48&lt;/code&gt; 오늘은 무슨 일이 있어도 꼭 릴리즈해야 겠다는 마음이었으나, 버프가 완전히 떨어져 효율이 전혀 나지 않았다.
아무튼 꾸역 꾸역 코딩해서 자체 댓글 기능 붙이고, 프로필 페이지를 작성하고, &lt;code&gt;Redis&lt;/code&gt;를 통해 캐시도 사용하도록 했고,
&lt;code&gt;Google Analytics&lt;/code&gt;도 붙이는 등의 마무리 작업을 계속했다. 
&lt;img alt="0419-01.jpg" src="./images/2013-04/0419-01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;17:26&lt;/code&gt; 드디어 실 서버에 배포하고 릴리즈했다. 아직 목표한 만큼 다 만들진 못했지만 오늘 릴리즈하지 않으면
알리기도 어렵고해서 대충 정리해서 배포한 다음, 트위터랑 IRC 등에 홍보를 조금 했다.
또한, 해당 컨퍼런스 담당 트위터 계정에도 멘션으로 팬 페이지를 만들었다고 알렸다.
&lt;img alt="0419-02.jpg" src="./images/2013-04/0419-02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;18:06&lt;/code&gt; 사용자들이 들어오기 시작했다! 들뜬 마음으로 쳐다보다가 근처에 가족이 와서 저녁을 먹으러 조금 일찍 퇴근했다.
&lt;img alt="0419-03.jpg" src="./images/2013-04/0419-03.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Afterwords&lt;/h1&gt;
&lt;p&gt;만들고자 했던 기능들 중, 페이스북 그래프 활용이나 자기가 듣고 싶은 세션을 체크하는 기능 등을 완성하진 못했다.
애초에 이 사이트를 만들려고 했던 것이 팬 페이지 만들어서 뭘 어떻게 해보겠다기 보다는,
어차피 앞으로 인하우스 도구를 만들 때 계속 쓸 것 같은 &lt;code&gt;Django&lt;/code&gt;를 좀 정리해서 제대로 써보고 싶었고,
그 과정에서 몇 가지 디자인을 해보고 싶었던 점이 크다. 그 와중에 명확한 목표나 데이터가 없으면 금방 흐지부지 그만둘 것이 뻔하고,
마침 가고 싶었던 컨퍼런스를 위한 사이트가 마땅히 없는 상태에서 잘 만들면 일석 이조가 될 것이라 생각했다.&lt;/p&gt;
&lt;p&gt;하지만 담당자로부터 컨퍼런스와 관련된 자료를 이용한 2차 저작물 제작을 허용하지 않는다는 얘기와 함께, 사이트를 내려 달라는 요청을 듣고,
오픈했던 팬 페이지를 서너시간 만에 닫을 수 밖에 없었다. 이해는 가지만 아쉬운 마음은 숨기기 어려운 것 같다.&lt;/p&gt;
&lt;p&gt;근 일주일 동안 즐겁게 작업했고, 간만에 원없이 CSS 질 한 것으로 만족해야겠다. 잠이 오지 않아, 뒤늦게 쓰려고 했던 제작 후기 글을 본의 아니게 일찍 쓰게 되었다.&lt;/p&gt;
&lt;p&gt;Github link: &lt;a href="https://github.com/lqez/ndc13"&gt;https://github.com/lqez/ndc13&lt;/a&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="django"></category><category term="surplus"></category></entry><entry><title>Sync LDAP to Google Apps account via GADS</title><link href="//lqez.github.io/blog/sync-ldap-to-google-apps-account-via-gads.html" rel="alternate"></link><published>2013-02-26T00:00:00+09:00</published><updated>2013-02-26T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-02-26:/blog/sync-ldap-to-google-apps-account-via-gads.html</id><summary type="html">&lt;p&gt;Google은 - 친절하게도 - Google Apps 계정을 외부 서버와 동기화할 수 있는 기능을 제공할 뿐 아니라, 이를 위한 도구도 배포하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://support.google.com/a/bin/answer.py?answer=172212"&gt;Google Apps Migration for Microsoft Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.google.com/a/bin/answer.py?answer=106368"&gt;Google Apps Directory Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.google.com/a/bin/answer.py?answer=2611842"&gt;Google Apps Password Sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스마트스터디는 사내 계정을 이미 LDAP으로 통합 운용중이라서, Google Apps Directory Sync(이하 GADS)를 선택하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.google.com/support/enterprise/static/gapps/docs/admin/en/gads/admin/"&gt;Google Apps …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Google은 - 친절하게도 - Google Apps 계정을 외부 서버와 동기화할 수 있는 기능을 제공할 뿐 아니라, 이를 위한 도구도 배포하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://support.google.com/a/bin/answer.py?answer=172212"&gt;Google Apps Migration for Microsoft Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.google.com/a/bin/answer.py?answer=106368"&gt;Google Apps Directory Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://support.google.com/a/bin/answer.py?answer=2611842"&gt;Google Apps Password Sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스마트스터디는 사내 계정을 이미 LDAP으로 통합 운용중이라서, Google Apps Directory Sync(이하 GADS)를 선택하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.google.com/support/enterprise/static/gapps/docs/admin/en/gads/admin/"&gt;Google Apps Directory Sync Administration Guide(in PDF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GADS는 단방향 즉, LDAP에서 GADS로의 동기화만을 제공한다. 동기화 가능한 항목은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Organizational Units&lt;/li&gt;
&lt;li&gt;Users Accounts&lt;/li&gt;
&lt;li&gt;Groups&lt;/li&gt;
&lt;li&gt;User Profiles&lt;/li&gt;
&lt;li&gt;Shared Contacts&lt;/li&gt;
&lt;li&gt;Calendar Resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GADS Configuration Tool은 자바를 이용한 GUI로 작성되어 있는데, 현재는 Windows / Linux 용만 제공된다. 이 툴을 통해 설정한 내용은 XML로 저장되고, 이 파일은 플랫폼 무관하게 사용할 수 있으므로, 일단 가상 머신의 Windows로 설정을 완료한 후에, 설정 파일을 복사하여 Linux에서 사용하였다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screen Shot of GADS" src="./images/gads_01.png"&gt;&lt;/p&gt;
&lt;p&gt;Linux용 GADS는 커맨드라인에서 설치하면 동의항목이 HTML로 출력되지만, 계속 엔터키를 입력해 넘기며 진행하면 설치가 가능하다.
root 계정으로 설치하는 경우에 /usr/local/GoogleAppsDirSync 에 설치가 되고, 이 디렉토리 아래에 있는 &lt;code&gt;sync-cmd&lt;/code&gt; 쉘 스크립트를 통해 동기화를 수행하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./sync-cmd -c &amp;lt;configuration_file.xml&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위와 같이 실행하면 비교만 하고, 실제로 동기화는 하지 않는 dry-run으로 실행되고,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./sync-cmd -a -c &amp;lt;configuration_file.xml&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-a&lt;/code&gt; 옵션을 추가해야 실제 동기화가 이뤄진다. 현재는 위 명령을 cron에 넣어 5분 마다 동기화 하도록 설정해두었다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="ldap"></category><category term="google"></category><category term="gads"></category><category term="sync"></category></entry><entry><title>Build vim with language support via Homebrew</title><link href="//lqez.github.io/blog/build-vim-with-language-support-via-homebrew.html" rel="alternate"></link><published>2013-02-20T00:00:00+09:00</published><updated>2013-02-20T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-02-20:/blog/build-vim-with-language-support-via-homebrew.html</id><summary type="html">&lt;p&gt;Mac OS X에 기본 설치된 vim은 다른 언어를 위한 지원 옵션 없이 빌드되어, &lt;a href="https://github.com/klen/python-mode"&gt;python-mode&lt;/a&gt; 등을 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;다행히도, Homebrew에 포함된 &lt;a href="https://github.com/mxcl/homebrew/blob/master/Library/Formula/vim.rb"&gt;vim.rb&lt;/a&gt;는 언어 지원을 위한 옵션을 포함하고 있어, 이를 이용해 편리하게 설치가 가능하다. 아래 명령으로 지원하는 옵션을 확인할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew options vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 지원을 포함하려면 아래와 같이 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mac OS X에 기본 설치된 vim은 다른 언어를 위한 지원 옵션 없이 빌드되어, &lt;a href="https://github.com/klen/python-mode"&gt;python-mode&lt;/a&gt; 등을 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;다행히도, Homebrew에 포함된 &lt;a href="https://github.com/mxcl/homebrew/blob/master/Library/Formula/vim.rb"&gt;vim.rb&lt;/a&gt;는 언어 지원을 위한 옵션을 포함하고 있어, 이를 이용해 편리하게 설치가 가능하다. 아래 명령으로 지원하는 옵션을 확인할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew options vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 지원을 포함하려면 아래와 같이 설치한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install vim --with-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vim.rb의 &lt;a href="https://github.com/mxcl/homebrew/blob/master/Library/Formula/vim.rb#L25"&gt;25-31L&lt;/a&gt;를 보면, &lt;code&gt;--with-&amp;lt;language&amp;gt;&lt;/code&gt; 옵션은 configure 시에 &lt;code&gt;--enable-&amp;lt;language&amp;gt;interp&lt;/code&gt; 옵션으로 변경된다.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="vim"></category><category term="python"></category><category term="homebrew"></category></entry><entry><title>펠리칸으로 작성하는 첫번째 블로그 포스트</title><link href="//lqez.github.io/blog/the-first-blog-post.html" rel="alternate"></link><published>2013-01-06T00:00:00+09:00</published><updated>2013-01-06T00:00:00+09:00</updated><author><name></name></author><id>tag:lqez.github.io,2013-01-06:/blog/the-first-blog-post.html</id><summary type="html">&lt;h1&gt;H1 테스트&lt;/h1&gt;
&lt;h2&gt;H2 테스트&lt;/h2&gt;
&lt;h3&gt;이건 H3&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;인용구는 이렇게 
처리하면 잘 나오겠지.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;리스트 아이템 1&lt;/li&gt;
&lt;li&gt;리스트 아이템 2
    두 줄짜리는 이렇게 되려나?&lt;/li&gt;
&lt;li&gt;리스트 아이템 3&lt;ul&gt;
&lt;li&gt;리스트B 아이템1&lt;/li&gt;
&lt;li&gt;리스트B 아이템2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;일반 문단&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;문장 중간에 &lt;code&gt;import os,sys&lt;/code&gt; 가 가능하지
이건 그냥 링크 &lt;a href=""&gt;http://lqez.github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lqez.github.com/"&gt;http://lqez.github …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h1&gt;H1 테스트&lt;/h1&gt;
&lt;h2&gt;H2 테스트&lt;/h2&gt;
&lt;h3&gt;이건 H3&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;인용구는 이렇게 
처리하면 잘 나오겠지.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;리스트 아이템 1&lt;/li&gt;
&lt;li&gt;리스트 아이템 2
    두 줄짜리는 이렇게 되려나?&lt;/li&gt;
&lt;li&gt;리스트 아이템 3&lt;ul&gt;
&lt;li&gt;리스트B 아이템1&lt;/li&gt;
&lt;li&gt;리스트B 아이템2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;일반 문단&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;문장 중간에 &lt;code&gt;import os,sys&lt;/code&gt; 가 가능하지
이건 그냥 링크 &lt;a href=""&gt;http://lqez.github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lqez.github.com/"&gt;http://lqez.github.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;single asterisks&lt;/em&gt;
&lt;em&gt;single underscores&lt;/em&gt;
&lt;strong&gt;double asterisks&lt;/strong&gt;
&lt;strong&gt;double underscores&lt;/strong&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content></entry></feed>